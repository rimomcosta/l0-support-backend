CREATE DATABASE  IF NOT EXISTS `l0support` /*!40100 DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci */;
USE `l0support`;
-- MySQL dump 10.13  Distrib 8.0.40, for macos14 (arm64)
--
-- Host: 127.0.0.1    Database: l0support
-- ------------------------------------------------------
-- Server version	5.5.5-10.4.34-MariaDB-1:10.4.34+maria~ubu2004

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `chat_messages`
--

DROP TABLE IF EXISTS `chat_messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `chat_messages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `chat_id` varchar(255) NOT NULL,
  `role` enum('user','assistant','system','thinking') NOT NULL,
  `content` longtext NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_chat_id` (`chat_id`),
  CONSTRAINT `fk_chat_id` FOREIGN KEY (`chat_id`) REFERENCES `chat_sessions` (`chat_id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=218 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chat_messages`
--

LOCK TABLES `chat_messages` WRITE;
/*!40000 ALTER TABLE `chat_messages` DISABLE KEYS */;
/*!40000 ALTER TABLE `chat_messages` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `chat_sessions`
--

DROP TABLE IF EXISTS `chat_sessions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `chat_sessions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `chat_id` varchar(255) NOT NULL,
  `user_id` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `project_id` varchar(255) DEFAULT NULL,
  `environment` varchar(255) DEFAULT NULL,
  `title` varchar(500) DEFAULT 'Untitled Chat',
  PRIMARY KEY (`id`),
  UNIQUE KEY `chat_id` (`chat_id`),
  KEY `idx_project_id` (`project_id`),
  KEY `idx_environment` (`environment`),
  KEY `idx_user_project_env` (`user_id`,`project_id`,`environment`),
  KEY `idx_chat_title` (`title`)
) ENGINE=InnoDB AUTO_INCREMENT=60 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `chat_sessions`
--

LOCK TABLES `chat_sessions` WRITE;
/*!40000 ALTER TABLE `chat_sessions` DISABLE KEYS */;
/*!40000 ALTER TABLE `chat_sessions` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `commands`
--

DROP TABLE IF EXISTS `commands`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `commands` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `command` text NOT NULL,
  `description` text DEFAULT NULL,
  `service_type` enum('ssh','sql','redis','opensearch','magento_cloud','bash','rabbitmq') NOT NULL,
  `execute_on_all_nodes` tinyint(1) DEFAULT 0,
  `allow_ai` tinyint(1) DEFAULT 0,
  `auto_run` tinyint(1) DEFAULT 1,
  `component_code` text DEFAULT NULL,
  `locked` tinyint(1) NOT NULL DEFAULT 0,
  `reviewed` tinyint(1) NOT NULL DEFAULT 0,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_service_type` (`service_type`),
  KEY `idx_created_at` (`created_at`)
) ENGINE=InnoDB AUTO_INCREMENT=65 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `commands`
--

LOCK TABLES `commands` WRITE;
/*!40000 ALTER TABLE `commands` DISABLE KEYS */;
INSERT INTO `commands` VALUES (1,'Redis Ping','ping',NULL,'redis',0,0,1,NULL,1,1,'2024-12-11 19:41:45','2025-01-20 21:45:37'),(2,'Redis Info Keyspace','INFO KEYSPACE','<p>Show information about the keyspace in Redis</p>','redis',0,1,1,'const KeyspaceInfoComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      return JSON.parse(output);\n    } catch (e) {\n      const keyValuePairs = output.split(\'\\n\').reduce((acc, line) => {\n        const [key, value] = line.split(\':\');\n        if (key && value) {\n          acc[key.trim()] = value.trim();\n        }\n        return acc;\n      }, {});\n      return Object.keys(keyValuePairs).length ? keyValuePairs : output;\n    }\n  };\n\n  const calculateAverageTTL = (dbInfo) => {\n    const ttlMatch = dbInfo.match(/avg_ttl=(\\d+)/);\n    if (ttlMatch) {\n      const ttl = parseInt(ttlMatch[1], 10);\n      if (!isNaN(ttl)) {\n        const seconds = Math.floor(ttl / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n\n        return { ttlString: `${days}d ${hours % 24}h ${minutes % 60}m ${seconds % 60}s`, days };\n      }\n    }\n    return { ttlString: \'N/A\', days: 0 };\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    if (typeof parsedData === \'string\') {\n      return React.createElement(\'div\', {\n        className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n      }, [\n        React.createElement(\'pre\', {\n          key: \'output\',\n          className: \'text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap font-mono\'\n        }, parsedData)\n      ]);\n    }\n\n    const dbElements = Object.keys(parsedData).map((dbKey) => {\n      const dbInfo = parsedData[dbKey].split(\',\').map((info, index) => {\n        const [key, value] = info.split(\'=\');\n        const ttlData = key === \'avg_ttl\' ? calculateAverageTTL(info) : null;\n        const displayValue = ttlData ? ttlData.ttlString : value;\n\n        return React.createElement(\'div\', {\n          key: `${dbKey}-${index}`,\n          className: ttlData && ttlData.days > 30 ? \'text-sm text-red-500 dark:text-red-400\' : \'text-sm text-gray-900 dark:text-gray-100\'\n        }, `${key}: ${displayValue}`);\n      });\n\n      return React.createElement(\'div\', {\n        key: dbKey,\n        className: \'mb-4\'\n      }, [\n        React.createElement(\'div\', {\n          key: `${dbKey}-title`,\n          className: \'text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\'\n        }, dbKey),\n        ...dbInfo\n      ]);\n    });\n\n    return React.createElement(\'div\', {\n      className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, dbElements);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};\n',0,1,'2024-12-11 19:41:45','2025-07-08 15:19:03'),(3,'Mysql Version','SELECT VERSION();',NULL,'sql',0,1,1,'',0,1,'2024-12-11 19:41:45','2025-07-08 15:19:05'),(4,'Check MySQL Processes','SHOW FULL PROCESSLIST;',NULL,'sql',0,1,1,NULL,0,1,'2024-12-11 19:41:45','2025-07-08 15:19:08'),(6,'Memory Usage','free -h','<p>Show memory usage</p>','ssh',1,1,1,'const MemoryUsageComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'string\') {\n        const lines = output.trim().split(\'\\n\');\n        if (lines.length < 3) throw new Error(\'Invalid format\');\n        \n        const memLine = lines.find(line => line.startsWith(\'Mem:\'));\n        const swapLine = lines.find(line => line.startsWith(\'Swap:\'));\n        \n        if (!memLine || !swapLine) throw new Error(\'Missing memory or swap data\');\n\n        const parseLine = (line) => {\n          const parts = line.split(/\\s+/).filter(Boolean);\n          return {\n            total: parts[1],\n            used: parts[2],\n            free: parts[3],\n            shared: parts[4],\n            buffCache: parts[5],\n            available: parts[6]\n          };\n        };\n\n        return {\n          mem: parseLine(memLine),\n          swap: parseLine(swapLine)\n        };\n      }\n      return JSON.parse(output);\n    } catch (e) {\n      return output;\n    }\n  };\n\n  const convertToGi = (value) => {\n    const numberPart = parseFloat(value.replace(/[GMK]i$/, \'\'));\n    if (value.endsWith(\'Mi\')) {\n      return numberPart / 1024;\n    } else if (value.endsWith(\'Ki\')) {\n      return numberPart / 1024 / 1024;\n    }\n    // Assume Gi if no unit or if unit is Gi\n    return numberPart;\n  };\n\n  const getUsagePercentage = (used, total) => {\n    const usedGi = convertToGi(used);\n    const totalGi = convertToGi(total);\n    return (usedGi / totalGi) * 100;\n  };\n\n  const getBarColor = (percentage, isSwap = false) => {\n    if (isSwap) {\n      if (percentage > 50) return \'bg-red-500\';\n      if (percentage > 0) return \'bg-yellow-500\';\n      return \'bg-green-500\';\n    }\n    if (percentage >= 80) return \'bg-red-500\';\n    if (percentage >= 60) return \'bg-yellow-500\';\n    return \'bg-green-500\';\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    if (typeof parsedData === \'string\') {\n      return React.createElement(\'div\', {\n        className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'node-id\',\n          className: \'text-xs text-gray-400 dark:text-gray-500 mb-2\'\n        }, `Node ${data.nodeId}`),\n        React.createElement(\'pre\', {\n          key: \'output\',\n          className: \'text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap font-mono\'\n        }, parsedData)\n      ]);\n    }\n\n    const renderUsageBar = (label, used, total) => {\n      const percentage = getUsagePercentage(used, total);\n      const isSwap = label === \'Swap\';\n      return React.createElement(\'div\', {\n        key: label,\n        className: \'flex items-center gap-2\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'label\',\n          className: \'w-16 text-xs text-gray-500 dark:text-gray-400\'\n        }, label),\n        React.createElement(\'div\', {\n          key: \'bar-bg\',\n          className: \'flex-1 h-2 bg-gray-100 dark:bg-gray-700 rounded-full overflow-hidden\'\n        }, \n          React.createElement(\'div\', {\n            key: \'bar\',\n            className: `h-full transition-all duration-300 ${getBarColor(percentage, isSwap)}`,\n            style: { width: `${percentage}%` }\n          })\n        ),\n        React.createElement(\'div\', {\n          key: \'value\',\n          className: \'w-20 text-xs font-medium text-gray-700 dark:text-gray-300 text-right\'\n        }, `${used} / ${total}`)\n      ]);\n    };\n\n    return React.createElement(\'div\', {\n      className: \'p-3 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'node-id\',\n        className: \'text-xs text-gray-400 dark:text-gray-500 mb-2\'\n      }, `Node ${data.nodeId}`),\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'flex items-center justify-between mb-2\'\n      }, [\n        React.createElement(\'h3\', {\n          key: \'title\',\n          className: \'text-xs font-medium text-gray-900 dark:text-gray-100\'\n        }, \'Memory Usage\'),\n        React.createElement(\'div\', {\n          key: \'stats\',\n          className: \'flex gap-2 text-xs text-gray-600 dark:text-gray-300\'\n        }, [\n          React.createElement(\'span\', {\n            key: \'available\'\n          }, `Available: ${parsedData.mem.available}`),\n          React.createElement(\'span\', {\n            key: \'buffcache\'\n          }, `Buff/Cache: ${parsedData.mem.buffCache}`)\n        ])\n      ]),\n      React.createElement(\'div\', {\n        key: \'bars\',\n        className: \'space-y-2\'\n      }, [\n        renderUsageBar(\'Memory\', parsedData.mem.used, parsedData.mem.total),\n        renderUsageBar(\'Swap\', parsedData.swap.used, parsedData.swap.total)\n      ])\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};\n\nMemoryUsageComponent;',0,1,'2024-12-11 19:41:45','2025-07-07 18:17:09'),(7,'Cluster Heatlh','{\"method\":\"GET\",\"path\":\"/_cluster/health\",\"data\":null}',NULL,'opensearch',0,1,1,NULL,0,1,'2024-12-11 19:41:45','2025-07-08 15:19:10'),(8,'Check OpenSearch Indices','{\"method\":\"GET\",\"path\":\"/_cat/indices?v\",\"data\":null}',NULL,'opensearch',0,0,1,NULL,0,1,'2024-12-11 19:41:45','2025-01-20 00:15:48'),(9,'List Magento Cloud Environments','magento-cloud repo:cat php.ini --project :projectid -e :environment',NULL,'magento_cloud',0,0,1,NULL,0,1,'2024-12-11 19:41:45','2025-01-20 00:28:57'),(10,'File .magento.env.yaml','repo:cat .magento.env.yaml -p :projectid -e :environment 2>/dev/null',NULL,'magento_cloud',0,1,1,'',0,1,'2024-12-11 19:41:45','2025-07-08 15:19:22'),(11,'List Magento Cloud Environments','environment:list -p :projectid',NULL,'magento_cloud',0,0,1,NULL,0,1,'2024-12-11 19:41:45','2025-01-20 00:15:48'),(13,'.magento.app.yaml','repo:cat .magento.app.yaml -p :projectid -e :environment','.magento.app.yaml file content','magento_cloud',0,0,1,NULL,0,1,'2024-12-16 02:53:23','2025-01-20 00:15:48'),(15,'Average Load','hostname && awk -v n=$(nproc) \'{ printf \"%.2f %.2f %.2f %s %s\\n\", $1/n, $2/n, $3/n, $4, $5 }\' /proc/loadavg && nproc','This command provides system load averages and information about running processes\n','ssh',1,1,1,'const LoadAverageComponent = ({ data }) => {\n    const LOAD_COLORS = {\n        purple: \'bg-purple-600\',\n        red: \'bg-red-500\',\n        yellow: \'bg-yellow-500\',\n        green: \'bg-green-500\',\n        gray: \'bg-gray-500\'\n    };\n\n    const parseOutput = (output) => {\n        try {\n            if (!output || typeof output !== \'string\') return null;\n            const lines = output.trim().split(\'\\n\');\n            if (lines.length < 2) return null;\n\n            const hostname = lines[0].trim();\n            const parts = lines[1].trim().split(\' \');\n            if (parts.length < 5) return null;\n\n            const load1 = parseFloat(parts[0]);\n            const load5 = parseFloat(parts[1]);\n            const load15 = parseFloat(parts[2]);\n            const processes = parts[3];\n            const pid = parseInt(parts[4], 10);\n\n            // Initialize cores as null\n            let cores = null;\n\n            // If there\'s a third line, parse cores\n            if (lines.length >= 3) {\n                const vcpusLine = lines[2].trim();\n                const parsedVcpus = parseInt(vcpusLine, 10);\n                cores = isNaN(parsedVcpus) ? null : parsedVcpus;\n            }\n\n            return {\n                hostname,\n                load1,\n                load5,\n                load15,\n                processes,\n                pid,\n                cores\n            };\n        } catch (e) {\n            return output;\n        }\n    };\n\n    const getLoadColor = (load) => {\n        if (load === null || load === undefined) return LOAD_COLORS.gray;\n        if (load >= 1) return LOAD_COLORS.purple;\n        if (load >= 0.8) return LOAD_COLORS.red;\n        if (load >= 0.5) return LOAD_COLORS.yellow;\n        return LOAD_COLORS.green;\n    };\n\n    const getBarWidth = (load) => {\n        if (load === null || load === undefined) return 0;\n        const maxLoad = 1.0;\n        const percentage = (load / maxLoad) * 100;\n        return Math.min(Math.max(percentage, 5), 100);\n    };\n\n    try {\n        if (!data || !data.output) {\n            return React.createElement(\'div\', {\n                className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n            }, \'No data available\');\n        }\n\n        const parsedData = parseOutput(data.output);\n\n        // If parsing returns a string, handle it as an error or raw output\n        if (typeof parsedData === \'string\') {\n            return React.createElement(\'div\', {\n                className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n            }, [\n                React.createElement(\'div\', {\n                    key: \'node-id\',\n                    className: \'text-xs text-gray-400 dark:text-gray-500 mb-2\'\n                }, `Node ${data.nodeId}`),\n                React.createElement(\'pre\', {\n                    key: \'output\',\n                    className: \'text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap font-mono\'\n                }, parsedData)\n            ]);\n        }\n\n        if (!parsedData) return null;\n\n        const { hostname, load1, load5, load15, processes, pid, cores } = parsedData;\n        const [active, total] = processes.split(\'/\');\n\n        const loads = [\n            { label: \'1 min\', value: load1 },\n            { label: \'5 min\', value: load5 },\n            { label: \'15 min\', value: load15 }\n        ];\n\n        // Construct the header text with node number, hostname, and cores\n        const headerText = `Node ${data.nodeId} - ${hostname}` + (cores !== null ? ` - ${cores} ${cores === 1 ? \'core\' : \'cores\'}` : \'\');\n\n        return React.createElement(\n            \'div\',\n            { className: \'p-3 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\' },\n            [\n                React.createElement(\'div\', {\n                    key: \'node-id\',\n                    className: \'text-xs text-gray-400 dark:text-gray-500 mb-2\'\n                }, headerText),\n                React.createElement(\'div\', {\n                    key: \'header\',\n                    className: \'flex items-center justify-between mb-2\'\n                }, [\n                    React.createElement(\'h3\', {\n                        key: \'title\',\n                        className: \'text-xs font-medium text-gray-900 dark:text-gray-100\'\n                    }, \'Load Average\'),\n                    React.createElement(\'div\', {\n                        key: \'processes\',\n                        className: \'flex gap-2 text-xs text-gray-600 dark:text-gray-300\'\n                    }, [\n                        React.createElement(\'span\', {\n                            key: \'process-count\'\n                        }, `${active}/${total} processes`),\n                        React.createElement(\'span\', {\n                            key: \'pid\'\n                        }, `PID: ${pid}`)\n                    ])\n                ]),\n                \n                React.createElement(\'div\', {\n                    key: \'bars\',\n                    className: \'space-y-2\'\n                }, loads.map(({ label, value }) => \n                    React.createElement(\'div\', {\n                        key: label,\n                        className: \'flex items-center gap-2\'\n                    }, [\n                        React.createElement(\'div\', {\n                            key: \'label\',\n                            className: \'w-12 text-xs text-gray-500 dark:text-gray-400\'\n                        }, label),\n                        React.createElement(\'div\', {\n                            key: \'bar-bg\',\n                            className: \'flex-1 h-2 bg-gray-100 dark:bg-gray-700 rounded-full overflow-hidden\'\n                        }, \n                            React.createElement(\'div\', {\n                                key: \'bar\',\n                                className: `h-full transition-all duration-300 ${getLoadColor(value)}`,\n                                style: { width: `${getBarWidth(value)}%` },\n                                title: `Load: ${value.toFixed(2)}`\n                            })\n                        ),\n                        React.createElement(\'div\', {\n                            key: \'value\',\n                            className: \'w-14 text-xs font-medium text-gray-700 dark:text-gray-300 text-right\'\n                        }, value.toFixed(2))\n                    ])\n                ))\n            ]\n        );\n    } catch (error) {\n        return React.createElement(\'div\', {\n            className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n        }, \'Error processing data\');\n    }\n};\n\nLoadAverageComponent;\n',0,1,'2024-12-16 07:54:17','2025-07-08 15:18:59'),(16,'Magento Version','version=$(./bin/magento --version 2>/dev/null | awk \'{print $3}\' || echo \"Unknown\"); release_date=$(curl -s \"https://experienceleague.adobe.com/en/docs/commerce-operations/release/versions\" | grep -A1 -E \">$version<\" | sed \'s/<[^>]*>//g\' | tail -1 | tr -d \'\\302\\240\' | tr -s \' \' || echo \"N/A\"); echo \"Magento version: ${version}\"; echo \"Release date: ${release_date:-N/A}\"; if [[ -n \"$release_date\" && \"$release_date\" != \"N/A\" ]]; then expiration_date=$(date -d \"$release_date +3 years\" +%Y-%m-%d 2>/dev/null || echo \"Invalid Date\"); current_date=$(date +%Y-%m-%d); if [[ \"$expiration_date\" > \"$current_date\" ]]; then months=$(( ( $(date -d \"$expiration_date\" +%-Y) - $(date -d \"$current_date\" +%-Y) ) * 12 + ( $(date -d \"$expiration_date\" +%-m) - $(date -d \"$current_date\" +%-m) ) - ( $(date -d \"$expiration_date\" +%-d) < $(date -d \"$current_date\" +%-d) ) )); days=$(( ( $(date -d \"$expiration_date\" +%s) - $(date -d \"$current_date\" +%s) ) / 86400 % 30 )); echo \"Support end date: $(date -d \"$expiration_date\" \'+%B %d, %Y\')\"; echo \"Time left to support expire: $months months and $days days\"; else expired_months=$(( ( $(date +%-Y) - $(date -d \"$expiration_date\" +%-Y) ) * 12 + $(date +%-m) - $(date -d \"$expiration_date\" +%-m) )); expired_days=$(( ( $(date +%s) - $(date -d \"$expiration_date +$expired_months months\" +%s) ) / 86400 )); if [[ $expired_days -lt 0 ]]; then expired_months=$((expired_months - 1)); expired_days=$(( ( $(date +%s) - $(date -d \"$expiration_date +$expired_months months\" +%s) ) / 86400 )); fi; echo \"Support end date: $(date -d \"$expiration_date\" \'+%B %d, %Y\')\"; echo \"Time left to support expire: Expired $expired_months months and $expired_days days ago\"; fi; else echo \"Time left to support expire: Unable to calculate (no release date found)\"; fi','<p>Show Magento version</p>','ssh',0,1,1,'const MagentoVersionComponent = ({ data }) => {\n  const parseVersionData = (output) => {\n    try {\n      const lines = output.split(\'\\n\');\n      const versionMatch = lines.find(line => line.startsWith(\'Magento version:\'));\n      const releaseDateMatch = lines.find(line => line.startsWith(\'Release date:\'));\n      const supportEndMatch = lines.find(line => line.startsWith(\'Support end date:\'));\n      const timeLeftMatch = lines.find(line => line.startsWith(\'Time left to support expire:\'));\n\n      return {\n        version: versionMatch ? versionMatch.split(\': \')[1] : \'N/A\',\n        releaseDate: releaseDateMatch ? releaseDateMatch.split(\': \')[1] : \'N/A\',\n        supportEndDate: supportEndMatch ? supportEndMatch.split(\': \')[1] : \'N/A\',\n        timeLeft: timeLeftMatch ? timeLeftMatch.split(\': \')[1] : \'N/A\',\n      };\n    } catch (error) {\n      return { version: \'N/A\', releaseDate: \'N/A\', supportEndDate: \'N/A\', timeLeft: \'N/A\' };\n    }\n  };\n\n  const getColorForTimeLeft = (timeLeft) => {\n    if (timeLeft === \'N/A\' || timeLeft.toLowerCase().includes(\'expired\')) return \'text-red-600 dark:text-red-400\';\n\n    const [months, days] = timeLeft\n      .replace(\'months\', \'\')\n      .replace(\'days\', \'\')\n      .trim()\n      .split(\'and\')\n      .map(part => parseInt(part, 10) || 0);\n\n    if (months > 12) return \'text-green-600 dark:text-green-400\';\n    if (months <= 12 && months > 1) return \'text-yellow-600 dark:text-yellow-400\';\n    return \'text-red-600 dark:text-red-400\';\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\n        \'div\',\n        {\n          className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n        },\n        \'No version data available\'\n      );\n    }\n\n    const { version, releaseDate, supportEndDate, timeLeft } = parseVersionData(data.output);\n    const commonColorClass = getColorForTimeLeft(timeLeft);\n\n    return React.createElement(\n      \'div\',\n      {\n        className:\n          \'p-6 bg-gradient-to-br from-white to-gray-50 dark:from-gray-800 dark:to-gray-900 rounded-lg border border-gray-100 dark:border-gray-700 hover:shadow-md transition-shadow duration-200\',\n      },\n      [\n        React.createElement(\n          \'div\',\n          {\n            key: \'content\',\n            className: \'flex flex-col items-center text-center space-y-6\', // Increased space for better separation\n          },\n          [\n            // Magento Version Section\n            React.createElement(\n              \'div\',\n              { key: \'version-section\', className: \'flex flex-col items-center\' },\n              [\n                React.createElement(\n                  \'div\',\n                  { key: \'version-title\', className: \'text-sm font-semibold text-gray-900 dark:text-gray-100 mb-1\' },\n                  \'Magento Version:\'\n                ),\n                React.createElement(\n                  \'span\',\n                  { className: `text-2xl font-bold ${commonColorClass} font-mono tracking-tight` },\n                  version\n                ),\n              ]\n            ),\n\n            // Release Date Section\n            React.createElement(\n              \'div\',\n              { key: \'release-date-section\', className: \'flex flex-col items-center\' },\n              [\n                React.createElement(\n                  \'div\',\n                  { key: \'release-date-title\', className: \'text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\' },\n                  \'Release Date:\'\n                ),\n                React.createElement(\'span\', { className: commonColorClass }, releaseDate),\n              ]\n            ),\n\n            // Support End Date Section\n            React.createElement(\n              \'div\',\n              { key: \'support-end-section\', className: \'flex flex-col items-center\' },\n              [\n                React.createElement(\n                  \'div\',\n                  { key: \'support-end-title\', className: \'text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\' },\n                  \'Support End Date:\'\n                ),\n                React.createElement(\'span\', { className: commonColorClass }, supportEndDate),\n              ]\n            ),\n\n            // Time Left Section\n            React.createElement(\n              \'div\',\n              { key: \'time-left-section\', className: \'flex flex-col items-center\' },\n              [\n                React.createElement(\n                  \'div\',\n                  { key: \'time-left-title\', className: \'text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\' },\n                  \'Time Left to Support Expire:\'\n                ),\n                React.createElement(\n                  \'span\',\n                  { className: `${commonColorClass} ${timeLeft.toLowerCase().includes(\'expired\') ? \'font-bold\' : \'\'}` },\n                  timeLeft\n                ),\n              ]\n            ),\n          ]\n        ),\n      ]\n    );\n  } catch (error) {\n    return React.createElement(\n      \'div\',\n      {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n      },\n      \'Error processing version data\'\n    );\n  }\n};\n',0,1,'2024-12-16 18:28:44','2025-07-08 15:18:58'),(22,'Cron Schedule','(command -v jq >/dev/null 2>&1 && (find ./app ./vendor -name crontab.xml 2>/dev/null -exec awk \'/<group id=\"/ { split($0, a, /<group id=\"/); split(a[2], b, /\"/); group = b[1]; } /<job name=\"/ { split($0, a, /<job name=\"/); split(a[2], b, /\"/); job = b[1]; } /<schedule>/ { split($0, a, /<schedule>/); split(a[2], b, /<\\/schedule>/); schedule = b[1]; print group \"\\t\" job \"\\t\" schedule \"\\t\" FILENAME; }\' {} \\; ; crontab -l 2>/dev/null | grep -vE \"^(#|$)\" | grep -v \"bin/magento cron:run\" | awk \'{ job = $NF; schedule = $1 \" \" $2 \" \" $3 \" \" $4 \" \" $5; print \"crontab\\t\" job \"\\t\" schedule \"\\tsystem_crontab\"; }\' ; [ -n \"$MAGENTO_CLOUD_APPLICATION\" ] && echo \"$MAGENTO_CLOUD_APPLICATION\" | base64 -d 2>/dev/null | jq -r \'.crons | to_entries[] | \"app.yaml\\t\\(.key)\\t\\(.value.spec)\\t.magento.app.yaml\"\' ) 2>/dev/null | jq -Rn \'[inputs | split(\"\\t\") | {group: .[0], job: .[1], schedule: .[2], file: .[3]}] | group_by(.group) | map({key: .[0].group, value: map({job, schedule, file})}) | from_entries\') || echo \'{}\'','Cron Schedule','ssh',0,0,0,'',1,1,'2024-12-17 09:11:12','2025-01-20 00:15:48'),(25,'Use Application Lock','php -r \"require \'app/bootstrap.php\'; \\$bootstrap = \\Magento\\Framework\\App\\Bootstrap::create(BP, \\$_SERVER); \\$objectManager = \\$bootstrap->getObjectManager(); \\$deploymentConfig = \\$objectManager->get(\'Magento\\Framework\\App\\DeploymentConfig\'); \\$useAppLock = \\$deploymentConfig->get(\'indexer/use_application_lock\'); echo \'use_application_lock: \' . (\\$useAppLock ? \'true\' : \'false\') . PHP_EOL;\"\n\n','<p><strong>Short explanation:</strong> Enhances the accuracy of indexer status reporting during reindexing processes5. This feature is particularly useful for preventing issues related to concurrent indexing operations and improving the overall stability of the indexing system.</p><p><br></p><p><strong>Long explanation: </strong>There is an edge case, let\'s understand it:</p><p>When USE_APPLICATION_LOCK is not used, the indexing check the status in the DB only:</p><pre class=\"ql-syntax\" spellcheck=\"false\">// In State.php\npublic function getStatus()\n{\n    return parent::getStatus(); // Just reads status from database\n}\n</pre><p>The&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">indexer_state</span>&nbsp;table stores the status of each indexer (e.g.,&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">invalid</span>,&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">working</span>,&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">valid</span>).Imagine two processes (two cron jobs or a cron job and a manual reindex command) trying to reindex the same indexer simultaneously:</p><p><br></p><p><strong>Process 1:</strong></p><ul><li>Reads the indexer status from&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">indexer_state</span>&nbsp;and finds it’s&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">invalid</span>.</li><li>Starts reindexing.</li><li>Updates the status to&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">working</span>&nbsp;in&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">indexer_state</span>.</li></ul><p><br></p><p><strong>Process 2:</strong></p><ul><li>Reads the indexer status from&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">indexer_state</span>&nbsp;<em>before</em>&nbsp;Process 1 updates it to&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">working</span>. It also finds the status as&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">invalid</span>.</li><li>Starts reindexing (thinking it’s the only process doing so).</li><li>Updates the status to&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">working</span>&nbsp;in&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">indexer_state</span>.</li><li><br></li></ul><p><strong>The Problem here:</strong>&nbsp;Now we have two processes reindexing the same data concurrently. This can lead to a lot of problem, and to prevent this, the cron&nbsp;logic tries to create a lock when it detects that a task is executing.</p><p><br></p><p>The problem is that if the indexer fail and the process is killed, the DB will not be updated and the status will be always “<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">working</span>”.To prevent this, “Use Application Lock” was created, and now, it doesn’t check the status in the DB only, it also checks the lock status with the lock manager, this is the code:</p><pre class=\"ql-syntax\" spellcheck=\"false\">public function getStatus()\n{\n    if ($this-&gt;isUseApplicationLock()) {\n        if (\n            parent::getStatus() == StateInterface::STATUS_WORKING &amp;&amp;\n            !$this-&gt;lockManager-&gt;isLocked($this-&gt;lockPrefix . $this-&gt;getIndexerId())\n        ) {\n            return StateInterface::STATUS_INVALID;\n        }\n    }\n    return parent::getStatus();\n}\n</pre><p><br></p><p><strong>Process 1:</strong></p><ul><li>Calls&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">Indexer\\State::setStatus(StateInterface::STATUS_WORKING)</span>.</li><li><span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">IndexMutex::execute()</span>&nbsp;is called.</li><li><span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">LockManagerInterface::lock()</span>&nbsp;is called (which uses&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">FileLock</span>&nbsp;in the merchant’s case).</li><li>A lock file is created (or attempted to be created) on the file system.</li><li>The indexer status is updated to&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">working</span>&nbsp;in the database.</li><li>Reindexing begins.</li></ul><p><br></p><p><strong>Process 2:</strong></p><ul><li>Calls&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">Indexer\\State::setStatus(StateInterface::STATUS_WORKING)</span>.</li><li><span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">IndexMutex::execute()</span>&nbsp;is called.</li><li><span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">LockManagerInterface::lock()</span>&nbsp;is called.</li><li>The lock attempt fails because the lock file already exists and is held by Process 1.</li><li><span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">Indexer\\State::getStatus()</span>&nbsp;is called, which now sees that the lock is held by another process and returns&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">invalid</span>.</li><li>Process 2 does not proceed with reindexing.</li></ul><p><br></p><p>In this way, the issue with multiple process trying to index is fixed.The down side is that, with “Use Application Lock”&nbsp;enabled,&nbsp;when an indexer is in&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">STATUS_WORKING</span>&nbsp;state, every&nbsp;<span style=\"color: rgb(232, 145, 45); background-color: rgba(var(--sk_foreground_min,29,28,29),.04);\">getStatus()</span>&nbsp;call will perform file operations on NFS. This is the code:</p><pre class=\"ql-syntax\" spellcheck=\"false\">/ In FileLock.php\npublic function isLocked(string $name): bool\n{\n    $lockFile = $this-&gt;getLockPath($name);\n    if ($this-&gt;fileDriver-&gt;isExists($lockFile)) {\n        $fileResource = $this-&gt;fileDriver-&gt;fileOpen($lockFile, \'w+\');\n        if ($this-&gt;tryToLock($fileResource)) {\n            $result = false;\n        } else {\n            $result = true;\n        }\n        $this-&gt;tryToUnlock($fileResource);\n        $this-&gt;fileDriver-&gt;fileClose($fileResource);\n    }\n    return $result;\n}\n</pre><p>Each check involves multiple NFS operations (exists, open, lock, unlock, close)</p><p><br></p><p>In summary, enabling it solve indexing concurrency issues, but it increases the NFS activity.</p><p>Usually NFS can handle that extra request, but think: If we are suggesting this option, probably the merchant has multiple issues with indexers getting stuck in \'working\' state, forcing us to reindex manually, common situation where the process fail due to other process causing resource constraint. Once this option is enabled, we ensure that the indexers will work as expected, but now, those extra process will be the cause of too much checks to <span style=\"background-color: rgba(29, 28, 29, 0.04); color: rgb(232, 145, 45);\">getStatus(), </span>which could now, transfer the issue to high load in NFS.</p><p>This is an EDGE CASE that happened on E-001484552.</p><p><br></p><p><strong>Final recommendation: </strong>Always enable it but monitor the NFS activity in NewRelic &gt; Infrastructure.</p>','ssh',0,1,1,'const IndexerLockStatusComponent = ({ data }) => {\n    const parseOutput = (output) => {\n        try {\n            const match = output.match(/use_application_lock:\\s*(true|false)/i);\n            return match ? match[1].toLowerCase() === \'true\' : null;\n        } catch (error) {\n            return null;\n        }\n    };\n\n    try {\n        if (!data || !data.output) {\n            return React.createElement(\'div\', {\n                className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n            }, \'No data available\');\n        }\n\n        const isLockEnabled = parseOutput(data.output);\n\n        return React.createElement(\'div\', {\n            className: \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n        }, [\n            React.createElement(\'div\', {\n                key: \'status-container\',\n                className: \'flex flex-col items-center justify-center space-y-4\'\n            }, [\n                React.createElement(\'div\', {\n                    key: \'status-text\',\n                    className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\'\n                }, \'Use Application Lock\'),\n                React.createElement(\'div\', {\n                    key: \'status-value\',\n                    className: `text-sm font-medium ${\n                        isLockEnabled\n                            ? \'text-green-600 dark:text-green-400\'\n                            : \'text-red-600 dark:text-red-400\'\n                    }`\n                }, isLockEnabled ? \'Enabled\' : \'Disabled\'),\n                React.createElement(\'div\', {\n                    key: \'status-description\',\n                    className: \'text-xs text-center text-gray-500 dark:text-gray-400 max-w-xs\'\n                }, \'Manages Lock at the Application Level\')\n            ])\n        ]);\n    } catch (error) {\n        return React.createElement(\'div\', {\n            className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n        }, \'Error processing data\');\n    }\n};\n',0,1,'2024-12-18 14:05:38','2025-07-08 15:18:46'),(26,'Parallel Indexing','php -r \'\nrequire \"app/bootstrap.php\";\n$bootstrap = \\Magento\\Framework\\App\\Bootstrap::create(BP, $_SERVER);\n$objectManager = $bootstrap->getObjectManager();\n\ntry {\n    $state = $objectManager->get(\"\\Magento\\Framework\\App\\State\");\n    $state->setAreaCode(\"global\");\n} catch (\\Magento\\Framework\\Exception\\LocalizedException $e) {\n    // Area code already set, no action needed\n}\n// Check if the ProcessManager class exists\nif (class_exists(\"\\Magento\\Indexer\\Model\\ProcessManager\")) {\n    // Retrieve the ProcessManager instance\n    $processManager = $objectManager->get(\"\\Magento\\Indexer\\Model\\ProcessManager\");\n} else {\n    echo \"ProcessManager class does not exist in Magento.\" . PHP_EOL;\n    exit(1);\n}\n// Use Reflection to access the private property \"threadsCount\"\n$reflection = new \\ReflectionObject($processManager);\nif ($reflection->hasProperty(\"threadsCount\")) {\n    $property = $reflection->getProperty(\"threadsCount\");\n    $property->setAccessible(true);\n    $threadsCount = $property->getValue($processManager);\n    echo \"Threads Count used by Magento Indexer: \" . $threadsCount . PHP_EOL;\n} else {\n    echo \"The property \\\"threadsCount\\\" does not exist in ProcessManager.\" . PHP_EOL;\n}\n\'','<p>Check if Parallel Indexing is enabled and with How many cores set</p>','ssh',0,1,1,'const ParallelIndexerStatus = ({ data }) => {\n  if (!data) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'No indexer data available\');\n  }\n  const output = data.output || \'\';\n  const threadsCount = parseInt(output.match(/\\d+/)?.[0] || \'0\');\n  const isEnabled = threadsCount > 0;\n\n  return React.createElement(\'div\', {\n    className: \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n  }, [\n    React.createElement(\'div\', {\n      key: \'status-container\',\n      className: \'flex flex-col items-center justify-center space-y-4\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'status-text\',\n        className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\'\n      }, \'Parallel Indexing\'),\n      React.createElement(\'div\', {\n        key: \'status-value\',\n        className: `text-sm font-medium ${\n          isEnabled\n            ? \'text-green-600 dark:text-green-400\'\n            : \'text-red-600 dark:text-red-400\'\n        }`\n      }, isEnabled ? \'Enabled\' : \'Disabled\'),\n      React.createElement(\'div\', {\n        key: \'status-description\',\n        className: \'text-xs text-center text-gray-500 dark:text-gray-400 max-w-xs\'\n      }, `${threadsCount} Thread${threadsCount === 1 ? \'\' : \'s\'} Allocated`)\n    ])\n  ]);\n};\n',0,1,'2024-12-18 14:06:44','2025-07-08 15:18:44'),(28,'Project Info','project:curl -p :projectid | grep -e \"created_at\" -e \"title\" -e \"code\" -e \"timezone\" -e \"region\" -e \"url\" -e \"license_uri\" -e \"plan\" -e \"environments\" -e \"storage\" -e \"included_users\" -e \"user_licenses\"','<p>Fetch data such as project name, url, region and others</p>','magento_cloud',0,0,1,'',0,1,'2024-12-20 22:33:23','2025-04-01 14:07:44'),(30,'Service and Application Size','project:curl -p :projectid /settings | grep development | grep -v \"development_domain_template\"','Display the Service and Application size of this project','magento_cloud',0,0,1,'',0,1,'2024-12-21 03:53:50','2025-07-08 15:18:43'),(32,'RabbitMQ Overview','show overview','Overview of RabbitMQ','rabbitmq',0,0,1,'const RabbitMQOverview = ({ data }) => {\n  const parseTableOutput = (output) => {\n    if (!output) return null;\n    \n    try {\n      if (typeof output === \'object\') return output;\n\n      const lines = output.split(\'\\n\');\n      const headers = lines[1].split(\'|\')\n        .map(h => h.trim())\n        .filter(h => h);\n      \n      const values = lines[3].split(\'|\')\n        .map(v => v.trim())\n        .filter(v => v);\n      \n      const result = {};\n      headers.forEach((header, index) => {\n        result[header] = values[index];\n      });\n      \n      return result;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseTableOutput(data.output);\n\n    if (!parsedData) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4\'\n      }, \'Unable to parse data\');\n    }\n\n    return React.createElement(\'div\', {\n      className: \'p-6 bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'node-id\',\n        className: \'text-xs text-gray-400 dark:text-gray-500 mb-4\'\n      }, `Node ${data.nodeId}`),\n      \n      React.createElement(\'div\', {\n        key: \'main-content\',\n        className: \'flex flex-wrap gap-8\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'version-cluster\',\n          className: \'flex-1 min-w-[300px]\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'version\',\n            className: \'mb-6\'\n          }, [\n            React.createElement(\'span\', {\n              key: \'version-label\',\n              className: \'text-sm font-medium text-gray-500 dark:text-gray-400\'\n            }, \'RabbitMQ Version\'),\n            React.createElement(\'h3\', {\n              key: \'version-value\',\n              className: \'text-2xl font-semibold text-gray-900 dark:text-gray-100\'\n            }, parsedData.rabbitmq_version)\n          ]),\n          React.createElement(\'div\', {\n            key: \'cluster\',\n            className: \'mb-6\'\n          }, [\n            React.createElement(\'span\', {\n              key: \'cluster-label\',\n              className: \'text-sm font-medium text-gray-500 dark:text-gray-400\'\n            }, \'Cluster Name\'),\n            React.createElement(\'div\', {\n              key: \'cluster-value\',\n              className: \'text-lg font-medium text-gray-800 dark:text-gray-200 break-all\'\n            }, parsedData.cluster_name)\n          ])\n        ]),\n\n        React.createElement(\'div\', {\n          key: \'metrics\',\n          className: \'flex-1 min-w-[300px] flex gap-6\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'messages\',\n            className: \'flex-1 relative\'\n          }, [\n            React.createElement(\'div\', {\n              key: \'messages-content\',\n              className: \'text-center p-4 rounded-lg border border-blue-200 dark:border-blue-800 bg-blue-50 dark:bg-blue-900/20\'\n            }, [\n              React.createElement(\'span\', {\n                key: \'messages-label\',\n                className: \'block text-sm font-medium text-blue-600 dark:text-blue-400\'\n              }, \'Total Messages\'),\n              React.createElement(\'span\', {\n                key: \'messages-value\',\n                className: \'block text-3xl font-bold text-blue-700 dark:text-blue-300 mt-2\'\n              }, parsedData[\'queue_totals.messages\'])\n            ])\n          ]),\n          \n          React.createElement(\'div\', {\n            key: \'queues\',\n            className: \'flex-1 relative\'\n          }, [\n            React.createElement(\'div\', {\n              key: \'queues-content\',\n              className: \'text-center p-4 rounded-lg border border-purple-200 dark:border-purple-800 bg-purple-50 dark:bg-purple-900/20\'\n            }, [\n              React.createElement(\'span\', {\n                key: \'queues-label\',\n                className: \'block text-sm font-medium text-purple-600 dark:text-purple-400\'\n              }, \'Total Queues\'),\n              React.createElement(\'span\', {\n                key: \'queues-value\',\n                className: \'block text-3xl font-bold text-purple-700 dark:text-purple-300 mt-2\'\n              }, parsedData[\'object_totals.queues\'])\n            ])\n          ])\n        ])\n      ])\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4\'\n    }, \'Error processing data\');\n  }\n};',0,1,'2024-12-21 08:10:50','2025-01-20 00:15:48'),(33,'SSH Links','magento-cloud ssh -p :projectid -e :environment --all','Show a list with all ssh url of each node','magento_cloud',0,0,1,'',0,1,'2025-01-02 06:17:03','2025-01-20 00:15:48'),(34,'Environment Variables','magento-cloud variables -p :projectid -e production','All custom environment variables','magento_cloud',0,0,1,'',0,1,'2025-01-02 06:36:42','2025-01-20 00:15:48'),(36,'Parallel Cache Generation','php -r \"require \'app/bootstrap.php\'; \\$bootstrap = \\Magento\\Framework\\App\\Bootstrap::create(BP, \\$_SERVER); \\$objectManager = \\$bootstrap->getObjectManager(); \\$lockGuardedCacheLoader = \\$objectManager->get(\'Magento\\Framework\\Cache\\LockGuardedCacheLoader\'); \\$reflection = new \\ReflectionClass(\\$lockGuardedCacheLoader); if (\\$reflection->hasProperty(\'allowParallelGenerationConfigValue\')) { \\$property = \\$reflection->getProperty(\'allowParallelGenerationConfigValue\'); \\$property->setAccessible(true); \\$allowParallelGeneration = \\$property->getValue(\\$lockGuardedCacheLoader); } else { \\$allowParallelGeneration = false; } echo \'allow_parallel_generation: \' . (\\$allowParallelGeneration === true ? \'true\' : \'false\') . PHP_EOL;\"','<p>This is about Parallel Cache Generation in Magento, which is a mechanism that determines how the system handles cache generation when multiple processes request the same uncached resource simultaneously.</p><p><br></p><p>Key points:</p><ul><li>When enabled (true): Multiple processes can generate cache simultaneously Faster initial cache population Good for high-concurrency scenarios Small risk of temporary data inconsistency</li><li>When disabled (false): Only one process can generate cache at a time Uses a locking mechanism Ensures data consistency Default and safer option</li></ul>','ssh',0,1,1,'const ParallelCacheGenerationDashboard = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      return JSON.parse(output);\n    } catch (e) {\n      const keyValuePattern = /(\\w+):\\s*(\\w+)/g;\n      const matches = [...output.matchAll(keyValuePattern)];\n      if (matches.length > 0) {\n        return matches.reduce((acc, match) => {\n          acc[match[1]] = match[2];\n          return acc;\n        }, {});\n      }\n      return output;\n    }\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    if (typeof parsedData === \'string\') {\n      return React.createElement(\'div\', {\n        className: \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'status-container\',\n          className: \'flex flex-col items-center justify-center space-y-4\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'status-text\',\n            className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\'\n          }, \'Parallel Cache Generation Status\'),\n          React.createElement(\'div\', {\n            key: \'status-value\',\n            className: \'text-sm font-medium text-gray-600 dark:text-gray-300\'\n          }, parsedData),\n          React.createElement(\'div\', {\n            key: \'status-description\',\n            className: \'text-xs text-center text-gray-500 dark:text-gray-400 max-w-xs\'\n          }, \'Unable to parse status information.\')\n        ])\n      ]);\n    }\n\n    const allowParallelGeneration = parsedData.allow_parallel_generation === \'true\';\n\n    return React.createElement(\'div\', {\n      className: \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'status-container\',\n        className: \'flex flex-col items-center justify-center space-y-4\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'status-text\',\n          className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\'\n        }, \'Parallel Cache Generation\'),\n        React.createElement(\'div\', {\n          key: \'status-value\',\n          className: `text-sm font-medium ${\n            allowParallelGeneration\n              ? \'text-green-600 dark:text-green-400\'\n              : \'text-blue-600 dark:text-blue-400\'\n          }`\n        }, allowParallelGeneration ? \'Enabled\' : \'Disabled\'),\n        React.createElement(\'div\', {\n          key: \'status-description\',\n          className: \'text-xs text-center text-gray-500 dark:text-gray-400 max-w-xs\'\n        }, allowParallelGeneration\n          ? \'Current value is to enhance cache performance. Disable it to ensure cache consistency at cost of performance.\'\n          : \'Current value is to ensure cache consistency. Enable it to gain performance at cost of resource usage.\')\n      ])\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};\n',0,1,'2025-01-02 14:13:32','2025-07-08 15:18:30'),(37,'OS Release','PRETTY_NAME=$(grep -m 1 \'PRETTY_NAME\' /etc/os-release 2>/dev/null | sed -E \'s/PRETTY_NAME=\"([^\"]*)\"/\\1/\' || echo \"Unknown\") && \\\necho \"OS Release: ${PRETTY_NAME}\"','Show information about the OS','ssh',0,1,1,'const MyCommandComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      return JSON.parse(output);\n    } catch (e) {\n      const keyValuePattern = /^(\\w+)=[\"\']?([^\"\']+)[\"\']?$/;\n      const match = output.match(keyValuePattern);\n      if (match) {\n        return { [match[1]]: match[2] };\n      }\n      return output;\n    }\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    if (typeof parsedData === \'string\') {\n      return React.createElement(\'div\', {\n        className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'output\',\n          className: \'text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap font-mono\'\n        }, parsedData)\n      ]);\n    }\n\n    return React.createElement(\'div\', {\n      className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'output-label\',\n        className: \'text-lg text-gray-900 dark:text-gray-100 font-semibold mb-2\'\n      }, \'Operating System:\'),\n      React.createElement(\'div\', {\n        key: \'output-value\',\n        className: \'text-sm text-gray-600 dark:text-gray-300 font-mono\'\n      }, parsedData.PRETTY_NAME)\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};',0,1,'2025-01-03 00:43:42','2025-07-08 15:18:27'),(38,'PHP Version','PHP_VERSION=$(php -v | head -n 1 | awk \'{print $2}\') && \\\nXDEBUG_STATUS=$(ps aux | grep -E \'xdebug|php-fpm.xdebug\' | grep -v grep > /dev/null && echo \"Enabled\" || echo \"Disabled\") && \\\nXDEBUG_SOCK=$(find /run/platform -type s -name \'*xdebug.sock\' 2>/dev/null | head -n 1) && \\\nXDEBUG_KEY=$(grep \'xdebug.sock\' /etc/platform/*/nginx.conf 2>/dev/null \\\n  | head -n 1 \\\n  | sed -E \'s/.*\"([^\"]*)\".*\"[^\"]*\".*/\\1/\') && \\\necho \"PHP Version: ${PHP_VERSION:-Unknown} | Xdebug Status: ${XDEBUG_STATUS:-Disabled} | Xdebug Socket: ${XDEBUG_SOCK:-Not Found} | Xdebug Config Key: ${XDEBUG_KEY:-Not Found}\"\n','Show Information about PHP and xdebug','ssh',0,1,1,'const MyCommandComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      return JSON.parse(output);\n    } catch (e) {\n      const keyValuePairs = output.split(\'|\').reduce((acc, pair) => {\n        const [key, value] = pair.split(\':\').map((str) => str.trim());\n        if (key && value) acc[key] = value;\n        return acc;\n      }, {});\n      return Object.keys(keyValuePairs).length ? keyValuePairs : output;\n    }\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    if (typeof parsedData === \'string\') {\n      return React.createElement(\'div\', {\n        className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'node-id\',\n          className: \'text-xs text-gray-400 dark:text-gray-500 mb-2\'\n        }, `Node ${data.nodeId}`),\n        React.createElement(\'pre\', {\n          key: \'output\',\n          className: \'text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap font-mono\'\n        }, parsedData)\n      ]);\n    }\n\n    return React.createElement(\'div\', {\n      className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'node-id\',\n        className: \'text-xs text-gray-400 dark:text-gray-500 mb-2\'\n      }, `Node ${data.nodeId}`),\n      React.createElement(\'div\', {\n        key: \'php-version\',\n        className: \'mb-2\'\n      }, [\n        React.createElement(\'span\', {\n          key: \'label\',\n          className: \'text-sm text-gray-500 dark:text-gray-400 font-medium\'\n        }, \'PHP Version: \'),\n        React.createElement(\'span\', {\n          key: \'value\',\n          className: \'text-sm text-gray-900 dark:text-gray-100 font-semibold\'\n        }, parsedData[\'PHP Version\'])\n      ]),\n      React.createElement(\'div\', {\n        key: \'xdebug-status\',\n        className: \'mb-2\'\n      }, [\n        React.createElement(\'span\', {\n          key: \'label\',\n          className: \'text-sm text-gray-500 dark:text-gray-400 font-medium\'\n        }, \'Xdebug Status: \'),\n        React.createElement(\'span\', {\n          key: \'value\',\n          className: `text-sm font-semibold ${\n            parsedData[\'Xdebug Status\'] === \'Enabled\' ? \'text-green-600 dark:text-green-400\' : \'text-red-600 dark:text-red-400\'\n          }`\n        }, parsedData[\'Xdebug Status\'])\n      ]),\n      React.createElement(\'div\', {\n        key: \'xdebug-socket\',\n        className: \'mb-2\'\n      }, [\n        React.createElement(\'span\', {\n          key: \'label\',\n          className: \'text-sm text-gray-500 dark:text-gray-400 font-medium\'\n        }, \'Socket: \'),\n        React.createElement(\'span\', {\n          key: \'value\',\n          className: \'text-sm text-gray-900 dark:text-gray-100 font-semibold\'\n        }, parsedData[\'Xdebug Socket\'])\n      ]),\n      React.createElement(\'div\', {\n        key: \'xdebug-config-key\',\n        className: \'mb-2\'\n      }, [\n        React.createElement(\'span\', {\n          key: \'label\',\n          className: \'text-sm text-gray-500 dark:text-gray-400 font-medium\'\n        }, \'Config Key: \'),\n        React.createElement(\'span\', {\n          key: \'value\',\n          className: \'text-sm text-gray-900 dark:text-gray-100 font-semibold\'\n        }, parsedData[\'Xdebug Config Key\'])\n      ])\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};',0,1,'2025-01-03 01:12:50','2025-07-08 15:18:28'),(39,'Redis L2 Cache','if [ -f .magento.env.yaml ] && grep -q \'REDIS_BACKEND: *[\"\'\\\'\'\"]*\\\\Magento\\\\Framework\\\\Cache\\\\Backend\\\\RemoteSynchronizedCache[\"\'\\\'\'\"]*\' .magento.env.yaml; then\n  echo \"L2 cache: Enabled\"\nelse\n  echo \"L2 cache: Disabled\"\nfi','<p>Check if Redis L2 cache implementation is configured</p>','ssh',0,1,1,'const L2CacheStatusComponent = ({ data }) => {\n    const parseOutput = (output) => {\n        try {\n            const match = output.match(/L2 cache:\\s*(Enabled|Disabled)/i);\n            return match ? match[1].toLowerCase() === \'enabled\' : null;\n        } catch (error) {\n            return null;\n        }\n    };\n\n    try {\n        if (!data || !data.output) {\n            return React.createElement(\n                \'div\',\n                {\n                    className:\n                        \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n                },\n                \'No data available\'\n            );\n        }\n\n        const isCacheEnabled = parseOutput(data.output);\n\n        return React.createElement(\n            \'div\',\n            {\n                className:\n                    \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\',\n            },\n            React.createElement(\n                \'div\',\n                {\n                    key: \'status-container\',\n                    className: \'flex flex-col items-center justify-center space-y-4\',\n                },\n                React.createElement(\n                    \'div\',\n                    {\n                        key: \'status-text\',\n                        className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\',\n                    },\n                    \'L2 Cache\'\n                ),\n                React.createElement(\n                    \'div\',\n                    {\n                        key: \'status-value\',\n                        className: `text-sm font-medium ${\n                            isCacheEnabled\n                                ? \'text-green-600 dark:text-green-400\'\n                                : \'text-red-600 dark:text-red-400\'\n                        }`,\n                    },\n                    isCacheEnabled ? \'Enabled\' : \'Disabled\'\n                ),\n                React.createElement(\n                    \'div\',\n                    {\n                        key: \'status-description\',\n                        className:\n                            \'text-xs text-center text-gray-500 dark:text-gray-400 max-w-xs\',\n                    },\n                    \'Manages L2 Cache Performance\'\n                )\n            )\n        );\n    } catch (error) {\n        return React.createElement(\n            \'div\',\n            {\n                className:\n                    \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n            },\n            \'Error processing data\'\n        );\n    }\n};\n',0,1,'2025-01-03 03:02:24','2025-01-22 21:08:30'),(40,'Slave Connections','( [ -f .magento.env.yaml ] && awk \'/REDIS_USE_SLAVE_CONNECTION: *true/ { redis=\"Redis Slave: Enabled\" } /MYSQL_USE_SLAVE_CONNECTION: *true/ { mysql=\"Mysql Slave: Enabled\" } END { print (redis ? redis : \"Redis Slave: Disabled\"); print (mysql ? mysql : \"Mysql Slave: Disabled\") }\' .magento.env.yaml ) || echo -e \"Redis Slave: Disabled\\nMysql Slave: Disabled\"','Check if Redis and Mysql Slave Connections are enabled','ssh',0,1,1,'const SlaveStatusComponent = ({ data }) => {\n  const parseOutputs = (output) => {\n      try {\n          // Split the output into lines\n          const lines = output.split(\'\\n\');\n          // Parse each line for slave status\n          const slaves = lines.map((line) => {\n              const match = line.match(/^(Redis Slave|Mysql Slave):\\s*(Enabled|Disabled)/i);\n              if (match) {\n                  return {\n                      name: match[1],\n                      isEnabled: match[2].toLowerCase() === \'enabled\',\n                  };\n              }\n              return null;\n          }).filter(item => item !== null); // Remove nulls\n          return slaves.length > 0 ? slaves : null;\n      } catch (error) {\n          return null;\n      }\n  };\n\n  try {\n      if (!data || !data.output) {\n          return React.createElement(\n              \'div\',\n              {\n                  className:\n                      \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n              },\n              \'No data available\'\n          );\n      }\n\n      const slaves = parseOutputs(data.output);\n\n      if (!slaves) {\n          return React.createElement(\n              \'div\',\n              {\n                  className:\n                      \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n              },\n              \'Invalid data format\'\n          );\n      }\n\n      return React.createElement(\n          \'div\',\n          {\n              className:\n                  \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\',\n          },\n          React.createElement(\n              \'div\',\n              {\n                  key: \'status-container\',\n                  className: \'flex flex-col space-y-4\',\n              },\n              slaves.map((slave, index) =>\n                  React.createElement(\n                      \'div\',\n                      { key: `slave-${index}`, className: \'flex flex-col items-center\' },\n                      React.createElement(\n                          \'div\',\n                          {\n                              className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\',\n                          },\n                          slave.name\n                      ),\n                      React.createElement(\n                          \'div\',\n                          {\n                              className: `text-sm font-medium ${\n                                  slave.isEnabled\n                                      ? \'text-green-600 dark:text-green-400\'\n                                      : \'text-red-600 dark:text-red-400\'\n                              }`,\n                          },\n                          slave.isEnabled ? \'Enabled\' : \'Disabled\'\n                      ),\n                      React.createElement(\n                          \'div\',\n                          {\n                              className:\n                                  \'text-xs text-center text-gray-500 dark:text-gray-400 max-w-xs\',\n                          },\n                          slave.name.toLowerCase().includes(\'redis\')\n                              ? \'\'\n                              : slave.name.toLowerCase().includes(\'mysql\')\n                              ? \'\'\n                              : \'Slave Services.\'\n                      )\n                  )\n              )\n          )\n      );\n  } catch (error) {\n      return React.createElement(\n          \'div\',\n          {\n              className:\n                  \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n          },\n          \'Error processing data\'\n      );\n  }\n};\n',0,1,'2025-01-03 04:07:29','2025-01-22 21:08:29'),(41,'Redis Timeout','( [ -f .magento.env.yaml ] && awk \'/^ *read_timeout:/ { timeout=$2 } /^ *connect_retries:/ { retries=$2 } END { print \"Redis Timeout: \" (timeout ? timeout : \"N/A\"); print \"Redis Connection Retries: \" (retries ? retries : \"N/A\") }\' .magento.env.yaml ) || echo -e \"Redis Timeout: N/A\\nRedis Connection Retries: N/A\"','<p>Check if Redis timeout details</p>','ssh',0,1,1,'const RedisSettingsComponent = ({ data }) => {\n  const parseOutput = (output) => {\n      try {\n          const timeoutMatch = output.match(/Redis Timeout:\\s*(\\d+)/i);\n          const retriesMatch = output.match(/Redis Connection Retries:\\s*(\\d+)/i);\n          return {\n              timeout: timeoutMatch ? parseInt(timeoutMatch[1], 10) : null,\n              retries: retriesMatch ? parseInt(retriesMatch[1], 10) : null,\n          };\n      } catch (error) {\n          return { timeout: null, retries: null };\n      }\n  };\n\n  try {\n      if (!data || !data.output) {\n          return React.createElement(\n              \'div\',\n              {\n                  className:\n                      \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n              },\n              \'No data available\'\n          );\n      }\n\n      const { timeout, retries } = parseOutput(data.output);\n\n      const timeoutColorClass =\n          timeout !== null ? \'text-green-600 dark:text-green-400\' : \'text-blue-600 dark:text-blue-400\';\n\n      const retriesColorClass =\n          retries !== null ? \'text-green-600 dark:text-green-400\' : \'text-blue-600 dark:text-blue-400\';\n\n      return React.createElement(\n          \'div\',\n          {\n              className:\n                  \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\',\n          },\n          React.createElement(\n              \'div\',\n              {\n                  className: \'flex flex-col space-y-4\',\n              },\n              React.createElement(\n                  \'div\',\n                  {\n                      className: \'flex flex-col items-center\',\n                  },\n                  React.createElement(\n                      \'div\',\n                      {\n                          className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\',\n                      },\n                      \'Redis Timeout\'\n                  ),\n                  React.createElement(\n                      \'div\',\n                      {\n                          className: `text-sm font-medium ${timeoutColorClass}`,\n                      },\n                      timeout !== null ? `${timeout} seconds` : \'N/A\'\n                  )\n              ),\n              React.createElement(\n                  \'div\',\n                  {\n                      className: \'flex flex-col items-center\',\n                  },\n                  React.createElement(\n                      \'div\',\n                      {\n                          className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\',\n                      },\n                      \'Redis Connection Retries\'\n                  ),\n                  React.createElement(\n                      \'div\',\n                      {\n                          className: `text-sm font-medium ${retriesColorClass}`,\n                      },\n                      retries !== null ? `${retries} times` : \'N/A\'\n                  )\n              )\n          )\n      );\n  } catch (error) {\n      return React.createElement(\n          \'div\',\n          {\n              className:\n                  \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n          },\n          \'Error processing data\'\n      );\n  }\n};\n',0,1,'2025-01-03 04:16:27','2025-01-22 21:08:28'),(42,'Pre-load Keys','( [ -f .magento.env.yaml ] && awk \'/^ *preload_keys:/ { pkeys=\"Pre load keys: Enabled\" } /^ *id_prefix:/ { prefix=\"Pre load keys prefix: \" $2 } END { print (pkeys ? pkeys : \"Pre load keys: Disabled\"); print (prefix ? prefix : \"Pre load keys prefix: N/A\") }\' .magento.env.yaml ) || echo -e \"Pre load keys: Disabled\\nPre load keys prefix: N/A\"\n','Check if there pre-load keys are enbaled','ssh',0,1,1,'const PreloadKeysComponent = ({ data }) => {\n    const parseOutput = (output) => {\n        try {\n            const lines = output.split(\'\\n\');\n            const settings = {};\n            lines.forEach((line) => {\n                const match = line.match(/^(.+?):\\s*\'?(.+?)\'?$/i);\n                if (match) {\n                    const key = match[1].trim();\n                    const value = match[2].trim().replace(/^\'(.*)\'$/, \'$1\');\n                    settings[key] = value;\n                }\n            });\n            return settings;\n        } catch (error) {\n            return null;\n        }\n    };\n\n    try {\n        if (!data || !data.output) {\n            return React.createElement(\n                \'div\',\n                {\n                    className:\n                        \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n                },\n                \'No data available\'\n            );\n        }\n\n        const settings = parseOutput(data.output);\n\n        if (!settings) {\n            return React.createElement(\n                \'div\',\n                {\n                    className:\n                        \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n                },\n                \'Invalid data format\'\n            );\n        }\n\n        const preloadKeys = settings[\'Pre load keys\'] || \'N/A\';\n        const preloadKeysPrefix = settings[\'Pre load keys prefix\'] || \'N/A\';\n\n        const preloadKeysColorClass =\n            preloadKeys.toLowerCase() === \'disabled\' || preloadKeys === \'N/A\'\n                ? \'text-red-600 dark:text-red-400\'\n                : \'text-green-600 dark:text-green-400\';\n\n        const preloadKeysPrefixColorClass =\n            preloadKeysPrefix === \'N/A\'\n                ? \'text-red-600 dark:text-red-400\'\n                : \'text-green-600 dark:text-green-400\';\n\n        return React.createElement(\n            \'div\',\n            {\n                className:\n                    \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\',\n            },\n            React.createElement(\n                \'div\',\n                {\n                    className: \'flex flex-col space-y-4\',\n                },\n                React.createElement(\n                    \'div\',\n                    {\n                        className: \'flex flex-col items-center\',\n                    },\n                    React.createElement(\n                        \'div\',\n                        {\n                            className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\',\n                        },\n                        \'Preload Keys\'\n                    ),\n                    React.createElement(\n                        \'div\',\n                        {\n                            className: `text-sm font-medium ${preloadKeysColorClass}`,\n                        },\n                        preloadKeys\n                    )\n                ),\n                React.createElement(\n                    \'div\',\n                    {\n                        className: \'flex flex-col items-center\',\n                    },\n                    React.createElement(\n                        \'div\',\n                        {\n                            className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\',\n                        },\n                        \'Preload Keys Prefix\'\n                    ),\n                    React.createElement(\n                        \'div\',\n                        {\n                            className: `text-sm font-medium ${preloadKeysPrefixColorClass}`,\n                        },\n                        `\'${preloadKeysPrefix}\'`\n                    )\n                )\n            )\n        );\n    } catch (error) {\n        return React.createElement(\n            \'div\',\n            {\n                className:\n                    \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n            },\n            \'Error processing data\'\n        );\n    }\n};\n',0,1,'2025-01-03 04:18:10','2025-01-22 21:08:27'),(43,'Cache Compression','( [ -f .magento.env.yaml ] && awk \'/^ *compress_data:/ { cdata=$2; if (cdata > 0) cEnabled=\"Keys Compression: Enabled\" } /^ *compress_tags:/ { ctags=$2 } /^ *compress_threshold:/ { cthres=$2 } /^ *compression_lib:/ { clib=$2 } END { print (cEnabled ? cEnabled : \"Keys Compression: Disabled\"); print \"compression data: \" (cdata ? cdata : \"0\"); print \"compression tags: \" (ctags ? ctags : \"N/A\"); print \"compression threshold: \" (cthres ? cthres : \"N/A\"); print \"compression lib: \" (clib ? clib : \"N/A\") }\' .magento.env.yaml ) || echo -e \"Keys Compression: Disabled\\ncompression data: 0\\ncompression tags: N/A\\ncompression threshold: N/A\\ncompression lib: N/A\"','<p>Check if the keys are compressed</p>','ssh',0,1,1,'const CompressionStatusComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'string\') {\n        const lines = output.split(\'\\n\');\n        return {\n          compressionEnabled: lines[0].includes(\'Enabled\'),\n          compressionData: parseInt(lines[1].split(\': \')[1]) || \'N/A\',\n          compressionTags: parseInt(lines[2].split(\': \')[1]) || \'N/A\',\n          compressionThreshold: parseInt(lines[3].split(\': \')[1]) || \'N/A\',\n          compressionLib: lines[4]?.split(\': \')[1]?.replace(/[\'\"]/g, \'\') || \'N/A\',\n        };\n      }\n      return output;\n    } catch (error) {\n      return {\n        compressionEnabled: false,\n        compressionData: \'N/A\',\n        compressionTags: \'N/A\',\n        compressionThreshold: \'N/A\',\n        compressionLib: \'N/A\',\n      };\n    }\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\n        \'div\',\n        {\n          className:\n            \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n        },\n        \'No compression data available\'\n      );\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    const getColorClass = (value) =>\n      value === \'N/A\' || value === null || value === false\n        ? \'text-blue-600 dark:text-blue-400\'\n        : \'text-green-600 dark:text-green-400\';\n\n    const progressBarClasses = \'h-2 rounded-full bg-blue-500 dark:bg-blue-600 transition-all duration-300\';\n    const labelClasses = \'text-sm font-medium text-gray-600 dark:text-gray-300 mb-1\';\n    const valueClasses = \'text-lg font-bold\';\n\n    return React.createElement(\n      \'div\',\n      {\n        className: \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\',\n      },\n      [\n        React.createElement(\n          \'div\',\n          {\n            key: \'status\',\n            className: \'flex items-center justify-between mb-6\',\n          },\n          [\n            React.createElement(\n              \'span\',\n              {\n                className: \'text-lg font-semibold text-gray-700 dark:text-gray-200\',\n              },\n              \'Keys Compression\'\n            ),\n            React.createElement(\n              \'span\',\n              {\n                className: `px-3 py-1 rounded-full text-sm font-medium ${\n                  parsedData.compressionEnabled\n                    ? \'bg-green-100 text-green-800 dark:bg-green-900 dark:text-white\'\n                    : \'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-white\'\n                }`,\n              },\n              parsedData.compressionEnabled ? \'Enabled\' : \'Disabled\'\n            ),\n          ]\n        ),\n        React.createElement(\n          \'div\',\n          {\n            key: \'metrics\',\n            className: \'space-y-4\',\n          },\n          [\n            React.createElement(\n              \'div\',\n              {\n                key: \'compression-levels\',\n                className: \'flex justify-between gap-4\',\n              },\n              [\n                React.createElement(\n                  \'div\',\n                  {\n                    key: \'data\',\n                    className: \'flex-1\',\n                  },\n                  [\n                    React.createElement(\'div\', { className: labelClasses }, \'Data Level\'),\n                    React.createElement(\n                      \'div\',\n                      { className: `${valueClasses} ${getColorClass(parsedData.compressionData)}` },\n                      parsedData.compressionData !== \'N/A\' ? parsedData.compressionData : \'N/A\'\n                    ),\n                    React.createElement(\n                      \'div\',\n                      { className: \'w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-2\' },\n                      React.createElement(\'div\', {\n                        className: progressBarClasses,\n                        style: { width: `${(parsedData.compressionData / 9) * 100}%` },\n                      })\n                    ),\n                  ]\n                ),\n                React.createElement(\n                  \'div\',\n                  {\n                    key: \'tags\',\n                    className: \'flex-1\',\n                  },\n                  [\n                    React.createElement(\'div\', { className: labelClasses }, \'Tags Level\'),\n                    React.createElement(\n                      \'div\',\n                      { className: `${valueClasses} ${getColorClass(parsedData.compressionTags)}` },\n                      parsedData.compressionTags !== \'N/A\' ? parsedData.compressionTags : \'N/A\'\n                    ),\n                    React.createElement(\n                      \'div\',\n                      { className: \'w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mt-2\' },\n                      React.createElement(\'div\', {\n                        className: progressBarClasses,\n                        style: { width: `${(parsedData.compressionTags / 9) * 100}%` },\n                      })\n                    ),\n                  ]\n                ),\n              ]\n            ),\n            React.createElement(\n              \'div\',\n              { key: \'threshold\', className: \'mt-4\' },\n              [\n                React.createElement(\'div\', { className: labelClasses }, \'Threshold\'),\n                React.createElement(\n                  \'div\',\n                  { className: `${valueClasses} ${getColorClass(parsedData.compressionThreshold)}` },\n                  parsedData.compressionThreshold !== \'N/A\'\n                    ? `${parsedData.compressionThreshold.toLocaleString()} bytes`\n                    : \'N/A\'\n                ),\n              ]\n            ),\n            React.createElement(\n              \'div\',\n              { key: \'lib\', className: \'mt-4\' },\n              [\n                React.createElement(\'div\', { className: labelClasses }, \'Compression Library\'),\n                React.createElement(\n                  \'div\',\n                  {\n                    className: `text-sm font-mono px-3 py-1 rounded ${\n                      getColorClass(parsedData.compressionLib) === \'text-blue-600 dark:text-blue-400\'\n                        ? \'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-white\'\n                        : \'bg-green-100 dark:bg-green-900 text-green-800 dark:text-white\'\n                    }`,\n                  },\n                  parsedData.compressionLib\n                ),\n              ]\n            ),\n          ]\n        ),\n      ]\n    );\n  } catch (error) {\n    return React.createElement(\n      \'div\',\n      {\n        className:\n          \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n      },\n      \'Error processing compression data\'\n    );\n  }\n};\n',0,1,'2025-01-03 04:32:55','2025-01-22 21:08:26'),(44,'Stale Cache','( [ -f .magento.env.yaml ] && awk \'BEGIN { sc=\"Use stale cache: Disabled\"; f=\"frontend: Disabled\"; l=\"layout: Disabled\"; bh=\"block_html: Disabled\"; r=\"reflection: Disabled\"; ci=\"config_integration: Disabled\"; cia=\"config_integration_api: Disabled\"; fp=\"full_page: Disabled\"; t=\"translate: Disabled\" } /use_stale_cache: *true/ { sc=\"Use stale cache: Enabled\" } /^[[:space:]]*layout:[[:space:]]*$/ { getline; if ($0 ~ /stale_cache_enabled/) l=\"layout: Enabled\" } /^[[:space:]]*block_html:[[:space:]]*$/ { getline; if ($0 ~ /stale_cache_enabled/) bh=\"block_html: Enabled\" } /^[[:space:]]*reflection:[[:space:]]*$/ { getline; if ($0 ~ /stale_cache_enabled/) r=\"reflection: Enabled\" } /^[[:space:]]*config_integration:[[:space:]]*$/ { getline; if ($0 ~ /stale_cache_enabled/) ci=\"config_integration: Enabled\" } /^[[:space:]]*config_integration_api:[[:space:]]*$/ { getline; if ($0 ~ /stale_cache_enabled/) cia=\"config_integration_api: Enabled\" } /^[[:space:]]*full_page:[[:space:]]*$/ { getline; if ($0 ~ /stale_cache_enabled/) fp=\"full_page: Enabled\" } /^[[:space:]]*translate:[[:space:]]*$/ { getline; if ($0 ~ /stale_cache_enabled/) t=\"translate: Enabled\" } END { print sc; print f; print l; print bh; print r; print ci; print cia; print fp; print t }\' .magento.env.yaml ) || echo -e \"Use stale cache: Disabled\\nfrontend: Disabled\\nlayout: Disabled\\nblock_html: Disabled\\nreflection: Disabled\\nconfig_integration: Disabled\\nconfig_integration_api: Disabled\\nfull_page: Disabled\\ntranslate: Disabled\"\n','Check if Stale cache is enabled','ssh',0,1,1,'const StaleCacheStatusComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      const lines = output.split(\'\\n\');\n      const result = {};\n      lines.forEach((line) => {\n        if (!line.includes(\': \')) return;\n        const [key, value] = line.split(\': \').map((s) => s.trim());\n        if (key && value) {\n          result[key] = value;\n        }\n      });\n      return result;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\n        \'div\',\n        {\n          className:\n            \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n        },\n        \'No cache status data available\'\n      );\n    }\n\n    const parsedData = parseOutput(data.output);\n    if (!parsedData) {\n      return React.createElement(\n        \'div\',\n        {\n          className:\n            \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n        },\n        \'Invalid cache status data format\'\n      );\n    }\n\n    return React.createElement(\n      \'div\',\n      {\n        className:\n          \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\',\n      },\n      [\n        React.createElement(\n          \'div\',\n          {\n            key: \'header\',\n            className: \'flex items-center justify-between mb-6\',\n          },\n          [\n            React.createElement(\n              \'div\',\n              {\n                key: \'title\',\n                className: \'text-xl font-semibold text-gray-900 dark:text-gray-100\',\n              },\n              \'Stale Cache\'\n            ),\n            React.createElement(\n              \'span\',\n              {\n                key: \'status\',\n                className: `px-3 py-1 rounded-full text-sm font-medium ${\n                  parsedData[\'Use stale cache\']?.toLowerCase() === \'enabled\'\n                    ? \'bg-green-100 text-green-800 dark:bg-green-900 dark:text-white\'\n                    : \'bg-red-100 text-red-800 dark:bg-red-900 dark:text-white\'\n                }`,\n              },\n              parsedData[\'Use stale cache\']?.toLowerCase() === \'enabled\'\n                ? \'Enabled\'\n                : \'Disabled\'\n            ),\n          ]\n        ),\n        React.createElement(\n          \'div\',\n          {\n            key: \'cache-items\',\n            className: \'space-y-2\',\n          },\n          Object.entries(parsedData)\n            .map(([key, value], index) => {\n              if (key === \'Use stale cache\' || key === \'frontend\') return null;\n              const valueClass =\n                value.toLowerCase() === \'enabled\'\n                  ? \'bg-green-500\'\n                  : value.toLowerCase() === \'n/a\'\n                  ? \'bg-red-500\'\n                  : \'bg-red-500\';\n              return React.createElement(\n                \'div\',\n                {\n                  key: `cache-item-${index}`,\n                  className: \'flex items-center justify-between\',\n                },\n                [\n                  React.createElement(\n                    \'span\',\n                    {\n                      key: `label-${index}`,\n                      className: \'text-sm text-gray-600 dark:text-gray-300\',\n                    },\n                    key.replace(/_/g, \' \')\n                  ),\n                  React.createElement(\'div\', {\n                    key: `indicator-${index}`,\n                    className: `w-2 h-2 rounded-full ${valueClass}`,\n                  }),\n                ]\n              );\n            })\n            .filter(Boolean)\n        ),\n      ]\n    );\n  } catch (error) {\n    return React.createElement(\n      \'div\',\n      {\n        className:\n          \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\',\n      },\n      \'Error processing cache status data\'\n    );\n  }\n};\n',0,1,'2025-01-03 04:40:16','2025-01-22 21:08:25'),(45,'list files locally','ls -lah','list files','bash',0,1,1,'',0,1,'2025-01-06 18:07:58','2025-01-22 21:08:25'),(46,'Disk Information','df -h','<p>Information about the disk usage</p>','ssh',1,1,1,'const DiskUsageComponent = ({ data }) => {\n  const { useState } = React; // Import useState hook\n  const [isCollapsed, setIsCollapsed] = useState(true); // State to manage collapse\n\n  // Function to parse the output data\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'string\') {\n        const lines = output.trim().split(\'\\n\');\n        const [headers, ...rows] = lines;\n        const columns = headers.split(/\\s+/);\n\n        return rows.map(row => {\n          const values = row.trim().split(/\\s+/);\n          return {\n            filesystem: values[0],\n            size: values[1],\n            used: values[2],\n            available: values[3],\n            usePercentage: parseInt(values[4]),\n            mountPoint: values[5]\n          };\n        });\n      }\n      return output;\n    } catch (error) {\n      return output;\n    }\n  };\n\n  // Helper function to determine text color based on usage percentage\n  const getUsageTextColor = (percentage) => {\n    if (percentage > 90) return \'text-red-500 dark:text-red-400\';\n    if (percentage > 70) return \'text-orange-500 dark:text-orange-400\';\n    if (percentage > 50) return \'text-yellow-500 dark:text-yellow-400\';\n    return \'text-green-500 dark:text-green-400\';\n  };\n\n  // Helper function to determine bar color based on usage percentage\n  const getBarColor = (percentage) => {\n    if (percentage > 90) return \'bg-red-500\';\n    if (percentage > 70) return \'bg-orange-500\';\n    if (percentage > 50) return \'bg-yellow-500\';\n    return \'bg-green-500\';\n  };\n\n  // Function to render the usage bar\n  const renderUsageBar = (percentage) => {\n    const barColor = getBarColor(percentage);\n    \n    return React.createElement(\'div\', {\n      className: \'w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\'\n    }, React.createElement(\'div\', {\n      className: `h-full ${barColor} transition-all duration-300`,\n      style: { width: `${percentage}%` }\n    }));\n  };\n\n  // Toggle function to handle collapse state\n  const toggleCollapse = () => setIsCollapsed(!isCollapsed);\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No disk usage data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    // Discreet Title with Toggle Functionality\n    const title = React.createElement(\'div\', {\n      onClick: toggleCollapse,\n      onKeyDown: (e) => { if (e.key === \'Enter\' || e.key === \' \') toggleCollapse(); }, // Accessibility: Toggle on Enter or Space\n      tabIndex: 0, // Make div focusable for accessibility\n      className: \'flex items-center cursor-pointer select-none text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\',\n      \'aria-expanded\': !isCollapsed // Accessibility: ARIA attribute\n    }, [\n      \'Disk Information\',\n      React.createElement(\'svg\', {\n        className: `w-4 h-4 ml-1 transition-transform duration-200 ${isCollapsed ? \'transform rotate-0\' : \'transform rotate-180\'}`,\n        xmlns: \'http://www.w3.org/2000/svg\',\n        fill: \'none\',\n        viewBox: \'0 0 24 24\',\n        stroke: \'currentColor\'\n      }, React.createElement(\'path\', {\n        strokeLinecap: \'round\',\n        strokeLinejoin: \'round\',\n        strokeWidth: 2,\n        d: \'M19 9l-7 7-7-7\'\n      }))\n    ]);\n\n    // Building the Disk Information Content\n    const content = React.createElement(\'div\', {\n      className: isCollapsed ? \'hidden\' : \'mt-2 space-y-4 max-h-[600px] overflow-y-auto\'\n    }, [\n      ...parsedData.map((item, index) => React.createElement(\'div\', {\n        key: `disk-${index}`,\n        className: \'p-3 bg-gray-50 dark:bg-gray-900 rounded-md\'\n      }, [\n        React.createElement(\'div\', {\n          key: `filesystem-${index}`,\n          className: \'flex justify-between items-center mb-1\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-sm font-mono text-gray-700 dark:text-gray-300 truncate max-w-[70%]\'\n          }, item.filesystem),\n          React.createElement(\'span\', {\n            className: `text-sm font-semibold ${getUsageTextColor(item.usePercentage)}`\n          }, `${item.usePercentage}%`)\n        ]),\n        renderUsageBar(item.usePercentage),\n        React.createElement(\'div\', {\n          key: `details-${index}`,\n          className: \'mt-1 flex space-x-4 text-xs text-gray-500 dark:text-gray-400\'\n        }, [\n          React.createElement(\'span\', { key: \'size\', className: `font-medium ${getUsageTextColor(item.usePercentage)}` }, `Total: ${item.size}`),\n          React.createElement(\'span\', { key: \'used\', className: `font-medium ${getUsageTextColor(item.usePercentage)}` }, `Used: ${item.used}`),\n          React.createElement(\'span\', { key: \'available\', className: `font-medium ${getUsageTextColor(item.usePercentage)}` }, `Free: ${item.available}`)\n        ]),\n        React.createElement(\'div\', {\n          key: `mount-${index}`,\n          className: \'mt-1 text-xs text-gray-400 dark:text-gray-500 truncate\'\n        }, `Mounted on: ${item.mountPoint}`)\n      ]))\n    ]);\n\n    // Main Container with Node ID, Title, and Content\n    return React.createElement(\'div\', {\n      className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'flex justify-between items-center mb-2\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'title\',\n          className: \'text-xs text-gray-400 dark:text-gray-500\'\n        }, `Node ${data.nodeId} - Disk Usage`),\n      ]),\n      title,\n      content\n    ]);\n  } catch (error) {\n    // Handle any unexpected errors gracefully\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing disk usage data\');\n  }\n};\n',0,1,'2025-01-07 05:17:13','2025-01-22 21:08:24'),(47,'Sessions TTL','# Extract the Redis session host and port, and check existence\nsession_host=$(echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | jq -r \'.[\"redis-session\"] | .[0].host // empty\')\nsession_port=$(echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | jq -r \'.[\"redis-session\"] | .[0].port // empty\')\n\nif [ -n \"$session_host\" ] && [ -n \"$session_port\" ]; then\n  echo \"Using redis-session on $session_host:$session_port.\"\n  keys=$(redis-cli -h \"$session_host\" -p \"$session_port\" --scan --pattern \"sess_*\" | head -n 1000)\n  if [ -z \"$keys\" ]; then\n    echo \"No keys found\"\n  else\n    echo \"$keys\" | shuf -n 10 | while read key; do\n      ttl=$(redis-cli -h \"$session_host\" -p \"$session_port\" ttl \"$key\");\n      if [ \"$ttl\" -gt 0 ]; then\n        human_readable_ttl=$(printf \'%d days, %02d hours, %02d minutes, %02d seconds\' $((ttl/86400)) $((ttl%86400/3600)) $((ttl%3600/60)) $((ttl%60)));\n        echo \"Key: $key, TTL: $human_readable_ttl\";\n      elif [ \"$ttl\" -eq -1 ]; then\n        echo \"Key: $key, TTL: No expiration (-1)\";\n      else\n        echo \"Key: $key, TTL: Expired or not found (-2)\";\n      fi;\n    done\n  fi\nelse\n  # Default to the normal Redis on DB 0\n  redis_host=$(echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | jq -r \'.[\"redis\"] | .[0].host\')\n  redis_port=$(echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | jq -r \'.[\"redis\"] | .[0].port\')\n  echo \"Using normal redis on $redis_host:$redis_port, DB 0.\"\n  keys=$(redis-cli -h \"$redis_host\" -p \"$redis_port\" --scan --pattern \"sess_*\" | head -n 1000)\n  if [ -z \"$keys\" ]; then\n    echo \"No keys found\"\n  else\n    echo \"$keys\" | shuf -n 10 | while read key; do\n      ttl=$(redis-cli -h \"$redis_host\" -p \"$redis_port\" ttl \"$key\");\n      if [ \"$ttl\" -gt 0 ]; then\n        human_readable_ttl=$(printf \'%d days, %02d hours, %02d minutes, %02d seconds\' $((ttl/86400)) $((ttl%86400/3600)) $((ttl%3600/60)) $((ttl%60)));\n        echo \"Key: $key, TTL: $human_readable_ttl\";\n      elif [ \"$ttl\" -eq -1 ]; then\n        echo \"Key: $key, TTL: No expiration (-1)\";\n      else\n        echo \"Key: $key, TTL: Expired or not found (-2)\";\n      fi;\n    done\n  fi\nfi','<p>Select 10 random keys from a list of 1000 keys and check the TTL of session keys.</p><p>High number of keys with long TTL or without TTL can lead to high Redis memory usage</p>','ssh',0,1,1,'const RedisSessionKeysComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      const lines = output.split(\'\\n\');\n      const portLine = lines[0];\n      const sessionData = lines.slice(1).map(line => {\n        const [keyPart, ttlPart] = line.split(\', TTL: \');\n        return {\n          key: keyPart.replace(\'Key: \', \'\'),\n          ttl: ttlPart\n        };\n      });\n      return { port: portLine, sessions: sessionData };\n    } catch (error) {\n      return null;\n    }\n  };\n\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const [copiedIndex, setCopiedIndex] = React.useState(null);\n\n  const copyToClipboard = (text, index) => {\n    navigator.clipboard.writeText(text);\n    setCopiedIndex(index);\n    setTimeout(() => setCopiedIndex(null), 1500);\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    if (!parsedData) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'Error parsing data\');\n    }\n\n    return React.createElement(\'div\', {\n      className: \'bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200 overflow-hidden\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'p-4 border-b dark:border-gray-700 flex justify-between items-center cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700\',\n        onClick: () => setIsExpanded(!isExpanded)\n      }, [\n        React.createElement(\'div\', {\n          className: \'text-sm font-medium text-gray-900 dark:text-gray-100\'\n        }, parsedData.port),\n        React.createElement(\'svg\', {\n          className: `w-5 h-5 text-gray-500 dark:text-gray-400 transform transition-transform duration-200 ${isExpanded ? \'rotate-180\' : \'\'}`,\n          fill: \'none\',\n          viewBox: \'0 0 24 24\',\n          stroke: \'currentColor\'\n        }, React.createElement(\'path\', {\n          strokeLinecap: \'round\',\n          strokeLinejoin: \'round\',\n          strokeWidth: 2,\n          d: \'M19 9l-7 7-7-7\'\n        }))\n      ]),\n      isExpanded && React.createElement(\'div\', {\n        key: \'content\',\n        className: \'divide-y dark:divide-gray-700\'\n      }, parsedData.sessions.map((session, index) => \n        React.createElement(\'div\', {\n          key: `session-${index}`,\n          className: \'p-4 flex justify-between items-center hover:bg-gray-50 dark:hover:bg-gray-700\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'key-section\',\n            className: \'flex items-center space-x-2\'\n          }, [\n            React.createElement(\'span\', {\n              className: \'font-mono text-sm text-blue-600 dark:text-blue-400 cursor-pointer hover:text-blue-800 dark:hover:text-blue-300\',\n              onClick: () => copyToClipboard(session.key, index)\n            }, session.key),\n            React.createElement(\'button\', {\n              onClick: () => copyToClipboard(session.key, index),\n              className: \'focus:outline-none group\'\n            }, copiedIndex === index ? \n              React.createElement(\'svg\', {\n                className: \'w-4 h-4 text-green-500\',\n                fill: \'none\',\n                viewBox: \'0 0 24 24\',\n                stroke: \'currentColor\'\n              }, React.createElement(\'path\', {\n                strokeLinecap: \'round\',\n                strokeLinejoin: \'round\',\n                strokeWidth: 2,\n                d: \'M5 13l4 4L19 7\'\n              })) :\n              React.createElement(\'svg\', {\n                className: \'w-4 h-4 text-gray-400 dark:text-gray-500 group-hover:text-gray-600 dark:group-hover:text-gray-300\',\n                fill: \'none\',\n                viewBox: \'0 0 24 24\',\n                stroke: \'currentColor\'\n              }, React.createElement(\'path\', {\n                strokeLinecap: \'round\',\n                strokeLinejoin: \'round\',\n                strokeWidth: 2,\n                d: \'M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\'\n              }))\n            )\n          ]),\n          React.createElement(\'span\', {\n            key: \'ttl\',\n            className: \'text-sm text-gray-600 dark:text-gray-300\'\n          }, session.ttl)\n        ])\n      ))\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};',0,1,'2025-01-09 13:57:33','2025-01-22 21:08:23'),(48,'Cron jobs missed','SELECT \n    job_code, \n    COUNT(*) AS missed_count \nFROM \n    cron_schedule \nWHERE \n    status = \'missed\' \nGROUP BY \n    job_code \nORDER BY \n    missed_count DESC;','','sql',0,1,0,'',1,1,'2025-01-20 20:09:36','2025-07-08 16:10:12'),(49,'Cron Schedule Table by Status','SELECT \n    status, \n    COUNT(*) AS count \nFROM \n    cron_schedule \nGROUP BY \n    status;','','sql',0,1,0,'',1,1,'2025-01-20 20:12:30','2025-07-08 16:10:09'),(50,'Longest Cron Execution Time','SELECT \n    schedule_id, \n    job_code, \n    status, \n    created_at, \n    scheduled_at, \n    executed_at, \n    finished_at, \n    FORMAT((UNIX_TIMESTAMP(finished_at) - UNIX_TIMESTAMP(executed_at))/60, 2) AS run_time_in_minutes \nFROM \n    cron_schedule \nORDER BY \n    (UNIX_TIMESTAMP(finished_at) - UNIX_TIMESTAMP(executed_at)) DESC \nLIMIT 30;','<p><br></p>','sql',0,1,0,'',1,1,'2025-01-20 20:12:57','2025-07-08 16:10:06'),(51,'Cron Jobs with Error','SELECT \n    * \nFROM \n    cron_schedule \nWHERE \n    status = \'error\' \nLIMIT 50;','','sql',0,1,0,'',1,1,'2025-01-20 20:13:31','2025-07-08 16:10:03'),(52,'Third-party cron jobs in Default Group','echo -e \'\\n\\n===Third-party cron jobs in Default Group===\'; dirs=(); for dir in ./app/code/*/*/etc ./vendor ./vendor/magento ./vendor/amzn ./vendor/dotmailer ./vendor/paypal ./vendor/vertex ./vendor/yotpo ./vendor/dotdigital ./vendor/klarna; do [ -d \"$dir\" ] && dirs+=(\"$dir\"); done; result=$(find \"${dirs[@]}\" -type d \\( -path ./vendor/magento -o -path ./vendor/amzn -o -path ./vendor/dotmailer -o -path ./vendor/paypal -o -path ./vendor/vertex -o -path ./vendor/yotpo -o -path ./vendor/dotdigital -o -path ./vendor/klarna \\) -prune -o -name crontab.xml -print0 | xargs -0 awk \'/<group id=\"default\">/{d=1} /<\\/group>/{d=0} /<job/ && d{name_start=index($0,\"name=\\\"\"); if(name_start>0){name_start+=6;remaining=substr($0,name_start);name_end=index(remaining,\"\\\"\");if(name_end>0){name=substr(remaining,1,name_end-1);gsub(/::/,\":\",name);print name}}}\'); if [ -z \"$result\" ]; then echo \'No third-party cron jobs found in the default group\'; else echo \"Third-party cron jobs in the default group:\"; echo \"$result\"; fi','','ssh',0,1,0,'',1,1,'2025-01-20 20:17:30','2025-07-08 16:09:59'),(54,'Redis memory usage','info | egrep --color \"(uptime_in_days|maxmemory_human|used_memory_human|used_memory_peak_human|evicted_keys|maxmemory_policy)\"','<p>Information about Redis usage</p>','redis',0,1,1,'const RedisUsageInfoComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'object\') return output;\n      \n      const lines = output.trim().split(\'\\n\');\n      const parsed = {};\n      lines.forEach(line => {\n        const [key, value] = line.split(\':\');\n        if (key && value) {\n          parsed[key.trim()] = value.trim();\n        }\n      });\n      return parsed;\n    } catch (error) {\n      return output;\n    }\n  };\n\n  const calculateMemoryUsagePercentage = (used, max) => {\n    const convertToBytes = (str) => {\n      const num = parseFloat(str);\n      const unit = str.replace(/[0-9.]/g, \'\');\n      const multipliers = { \'B\': 1, \'K\': 1024, \'M\': 1024**2, \'G\': 1024**3 };\n      return num * multipliers[unit[0]];\n    };\n\n    const usedBytes = convertToBytes(used);\n    const maxBytes = convertToBytes(max);\n    return (usedBytes / maxBytes) * 100;\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    const memoryUsagePercentage = calculateMemoryUsagePercentage(\n      parsedData.used_memory_human,\n      parsedData.maxmemory_human\n    );\n\n    return React.createElement(\'div\', {\n      className: \'p-6 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'node-id\',\n        className: \'text-xs text-gray-400 dark:text-gray-500 mb-4\'\n      }, `Node ${data.nodeId}`),\n\n      React.createElement(\'div\', {\n        key: \'memory-usage\',\n        className: \'mb-6\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'memory-header\',\n          className: \'flex justify-between items-center mb-2\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-sm font-medium text-gray-700 dark:text-gray-300\'\n          }, \'Memory Usage\'),\n          React.createElement(\'span\', {\n            className: \'text-sm font-mono text-gray-600 dark:text-gray-400\'\n          }, `${parsedData.used_memory_human} / ${parsedData.maxmemory_human}`)\n        ]),\n        React.createElement(\'div\', {\n          key: \'memory-bar\',\n          className: \'h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\'\n        }, \n          React.createElement(\'div\', {\n            className: `h-full ${memoryUsagePercentage > 80 ? \'bg-red-500\' : memoryUsagePercentage > 60 ? \'bg-yellow-500\' : \'bg-green-500\'}`,\n            style: { width: `${memoryUsagePercentage}%` }\n          })\n        )\n      ]),\n\n      React.createElement(\'div\', {\n        key: \'stats\',\n        className: \'space-y-4\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'uptime\',\n          className: \'flex items-center space-x-2\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-sm font-medium text-gray-700 dark:text-gray-300\'\n          }, \'Uptime:\'),\n          React.createElement(\'span\', {\n            className: \'text-sm font-mono text-gray-600 dark:text-gray-400\'\n          }, `${parsedData.uptime_in_days} days`)\n        ]),\n\n        React.createElement(\'div\', {\n          key: \'peak-memory\',\n          className: \'flex items-center space-x-2\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-sm font-medium text-gray-700 dark:text-gray-300\'\n          }, \'Peak Memory:\'),\n          React.createElement(\'span\', {\n            className: \'text-sm font-mono text-gray-600 dark:text-gray-400\'\n          }, parsedData.used_memory_peak_human)\n        ]),\n\n        React.createElement(\'div\', {\n          key: \'eviction-policy\',\n          className: \'flex items-center space-x-2\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-sm font-medium text-gray-700 dark:text-gray-300\'\n          }, \'Eviction Policy:\'),\n          React.createElement(\'span\', {\n            className: \'text-sm font-mono text-gray-600 dark:text-gray-400\'\n          }, parsedData.maxmemory_policy)\n        ]),\n\n        React.createElement(\'div\', {\n          key: \'evicted-keys\',\n          className: \'flex items-center space-x-2\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-sm font-medium text-gray-700 dark:text-gray-300\'\n          }, \'Evicted Keys:\'),\n          React.createElement(\'span\', {\n            className: `text-sm font-mono ${parseInt(parsedData.evicted_keys) > 0 ? \'text-red-500 dark:text-red-400\' : \'text-green-500 dark:text-green-400\'}`\n          }, parsedData.evicted_keys)\n        ])\n      ])\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};',0,1,'2025-01-21 07:04:06','2025-06-10 11:37:59'),(55,'Index Status','bin/magento index:status','<p>Show the status of the indexers</p>','ssh',0,1,1,'const IndexStatusComponent = ({ data }) => {\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const [expandedIndexers, setExpandedIndexers] = React.useState(new Set());\n\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'string\') {\n        const rows = output\n          .split(\'\\n\')\n          .filter(row => row.trim() && !row.includes(\'+--\'))\n          .map(row => row.split(\'|\').map(cell => cell.trim()).filter(cell => cell));\n\n        const headers = rows[0];\n        const items = rows.slice(1).map(row => {\n          const item = {};\n          headers.forEach((header, index) => {\n            item[header.toLowerCase().replace(/\\s+/g, \'_\')] = row[index];\n          });\n          return item;\n        });\n        return { headers, items };\n      }\n      return output;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status.toLowerCase()) {\n      case \'ready\':\n        return \'text-green-500 dark:text-green-400\';\n      case \'processing\':\n        return \'text-blue-500 dark:text-blue-400\';\n      default:\n        return \'text-gray-500 dark:text-gray-400\';\n    }\n  };\n\n  const toggleIndexer = (indexerName) => {\n    const newExpanded = new Set(expandedIndexers);\n    if (newExpanded.has(indexerName)) {\n      newExpanded.delete(indexerName);\n    } else {\n      newExpanded.add(indexerName);\n    }\n    setExpandedIndexers(newExpanded);\n  };\n\n  // The ONLY change: define which headers/fields are visible in main table\n  const MAIN_COLUMNS = [\'id\', \'schedule_status\', \'update_on\'];\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-2 border border-gray-200 dark:border-gray-700 rounded-lg text-sm\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    if (!parsedData) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-2 border border-gray-200 dark:border-gray-700 rounded-lg text-sm\'\n      }, \'Invalid data format\');\n    }\n\n    // Map header to key (e.g. \"Update on\" => \"update_on\")\n    const headerKey = (h) => h.toLowerCase().replace(/\\s+/g, \'_\');\n\n    // Only display these headers in the table\n    const visibleHeaders = parsedData.headers.filter(\n      h => MAIN_COLUMNS.includes(headerKey(h))\n    );\n\n    return React.createElement(\'div\', {\n      className: \'bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200 overflow-hidden\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'p-2 cursor-pointer flex justify-between items-center\',\n        onClick: () => setIsExpanded(!isExpanded)\n      }, [\n        React.createElement(\'div\', {\n          className: \'flex flex-col\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-xs text-gray-400 dark:text-gray-500\'\n          }, `Node ${data.nodeId}`),\n          React.createElement(\'span\', {\n            className: \'text-sm font-semibold text-gray-900 dark:text-gray-100\'\n          }, \'Index Status\')\n        ]),\n        React.createElement(\'svg\', {\n          className: `w-4 h-4 transform transition-transform duration-200 ${isExpanded ? \'rotate-180\' : \'\'}`,\n          fill: \'none\',\n          stroke: \'currentColor\',\n          viewBox: \'0 0 24 24\'\n        }, React.createElement(\'path\', {\n          strokeLinecap: \'round\',\n          strokeLinejoin: \'round\',\n          strokeWidth: \'2\',\n          d: \'M19 9l-7 7-7-7\'\n        }))\n      ]),\n      isExpanded && React.createElement(\'div\', {\n        key: \'content\',\n        className: \'overflow-x-auto\'\n      }, React.createElement(\'table\', {\n        className: \'min-w-full divide-y divide-gray-200 dark:divide-gray-700\'\n      }, [\n        React.createElement(\'thead\', {\n          key: \'thead\',\n          className: \'bg-gray-50 dark:bg-gray-700\'\n        }, React.createElement(\'tr\', null, visibleHeaders.map((header, index) =>\n          React.createElement(\'th\', {\n            key: `th-${index}`,\n            className: \'px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\'\n          }, header)\n        ))),\n        React.createElement(\'tbody\', {\n          key: \'tbody\',\n          className: \'bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\'\n        }, parsedData.items.map((item, rowIndex) => {\n          const indexerName = item.indexer || item.name || `Item ${rowIndex + 1}`;\n          const isIndexerExpanded = expandedIndexers.has(indexerName);\n\n          return React.createElement(React.Fragment, {\n            key: `fragment-${rowIndex}`\n          }, [\n            React.createElement(\'tr\', {\n              key: `row-${rowIndex}`,\n              className: \'hover:bg-gray-50 dark:hover:bg-gray-700\'\n            }, [\n              visibleHeaders.map((header, colIndex) => {\n                const key = headerKey(header);\n                const value = item[key];\n\n                // Add expand button to first column\n                if (colIndex === 0) {\n                  return React.createElement(\'td\', {\n                    key: `td-${rowIndex}-${colIndex}`,\n                    className: `px-3 py-2 whitespace-nowrap text-xs text-gray-900 dark:text-gray-300`\n                  }, [\n                    React.createElement(\'div\', {\n                      className: \'flex items-center space-x-2\'\n                    }, [\n                      React.createElement(\'button\', {\n                        key: \'expand-btn\',\n                        className: \'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\',\n                        onClick: (e) => {\n                          e.stopPropagation();\n                          toggleIndexer(indexerName);\n                        }\n                      }, React.createElement(\'svg\', {\n                        className: `w-3 h-3 transform transition-transform duration-200 ${isIndexerExpanded ? \'rotate-90\' : \'\'}`,\n                        fill: \'none\',\n                        stroke: \'currentColor\',\n                        viewBox: \'0 0 24 24\'\n                      }, React.createElement(\'path\', {\n                        strokeLinecap: \'round\',\n                        strokeLinejoin: \'round\',\n                        strokeWidth: \'2\',\n                        d: \'M9 5l7 7-7 7\'\n                      }))),\n                      React.createElement(\'span\', {\n                        key: \'value\'\n                      }, value)\n                    ])\n                  ]);\n                }\n\n                return React.createElement(\'td\', {\n                  key: `td-${rowIndex}-${colIndex}`,\n                  className: `px-3 py-2 whitespace-nowrap text-xs text-gray-900 dark:text-gray-300`\n                }, value);\n              })\n            ]),\n            isIndexerExpanded && React.createElement(\'tr\', {\n              key: `expanded-${rowIndex}`,\n              className: \'bg-gray-50 dark:bg-gray-700\'\n            }, React.createElement(\'td\', {\n              colSpan: visibleHeaders.length,\n              className: \'px-6 py-3\'\n            }, React.createElement(\'div\', {\n              className: \'space-y-2\'\n            }, [\n              // All other fields (not shown in main columns) go here\n              parsedData.headers\n                .filter(header => !MAIN_COLUMNS.includes(headerKey(header)))\n                .map((header, headerIndex) => {\n                  const key = headerKey(header);\n                  const value = item[key];\n                  if (!value) return null;\n                  return React.createElement(\'div\', {\n                    key: `extra-${headerIndex}`,\n                    className: \'flex flex-col\'\n                  }, [\n                    React.createElement(\'span\', {\n                      className: \'text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\'\n                    }, header),\n                    React.createElement(\'span\', {\n                      className: \'text-sm text-gray-900 dark:text-gray-100\'\n                    }, value)\n                  ]);\n                })\n            ])))\n          ]);\n        }))\n      ]))\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-2 border border-gray-200 dark:border-gray-700 rounded-lg text-sm\'\n    }, \'Error processing data\');\n  }\n};\n',0,1,'2025-04-02 13:51:07','2025-07-15 15:46:42'),(56,'.magento.env.yalm','[ -f .magento.env.yaml ] && cat .magento.env.yaml || echo \"File not found in this environment: .magento.env.yaml\"','<p>Content of the file .magento.env.yaml</p>','ssh',0,1,1,'const MagentoEnvConfigComponent = ({ data }) => {\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'string\') {\n        return jsyaml.load(output);\n      }\n      return output;\n    } catch (error) {\n      return output;\n    }\n  };\n\n  const renderValue = (value) => {\n    if (typeof value === \'boolean\') {\n      return React.createElement(\'span\', {\n        className: `px-2 py-1 rounded text-xs ${value ? \'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\' : \'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\'}`\n      }, value.toString());\n    }\n    return React.createElement(\'span\', {\n      className: \'text-gray-700 dark:text-gray-300 font-mono text-sm\'\n    }, value);\n  };\n\n  const renderConfigSection = (section, sectionName) => {\n    return React.createElement(\'div\', {\n      key: sectionName,\n      className: \'mb-4\'\n    }, [\n      React.createElement(\'h3\', {\n        key: `${sectionName}-title`,\n        className: \'text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\'\n      }, sectionName),\n      React.createElement(\'div\', {\n        key: `${sectionName}-content`,\n        className: \'pl-4 border-l-2 border-gray-200 dark:border-gray-600\'\n      }, Object.entries(section).map(([key, value]) => {\n        if (typeof value === \'object\' && value !== null) {\n          return renderConfigSection(value, key);\n        }\n        return React.createElement(\'div\', {\n          key: key,\n          className: \'flex items-center justify-between py-1\'\n        }, [\n          React.createElement(\'span\', {\n            key: `${key}-label`,\n            className: \'text-gray-600 dark:text-gray-400 text-sm\'\n          }, key),\n          renderValue(value)\n        ]);\n      }))\n    ]);\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    return React.createElement(\'div\', {\n      className: \'bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'p-4 cursor-pointer flex justify-between items-center\',\n        onClick: () => setIsExpanded(!isExpanded)\n      }, [\n        React.createElement(\'div\', {\n          className: \'flex items-center\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-xs text-gray-400 dark:text-gray-500\'\n          }, `Node ${data.nodeId}`),\n          React.createElement(\'span\', {\n            className: \'ml-2 text-sm font-medium text-gray-700 dark:text-gray-300\'\n          }, \'.magento.env.yaml\')\n        ]),\n        React.createElement(\'svg\', {\n          className: `w-5 h-5 text-gray-500 dark:text-gray-400 transform transition-transform ${isExpanded ? \'rotate-180\' : \'\'}`,\n          fill: \'none\',\n          strokeLinecap: \'round\',\n          strokeLinejoin: \'round\',\n          strokeWidth: \'2\',\n          viewBox: \'0 0 24 24\',\n          stroke: \'currentColor\'\n        }, React.createElement(\'path\', {\n          d: \'M19 9l-7 7-7-7\'\n        }))\n      ]),\n      isExpanded && React.createElement(\'div\', {\n        key: \'content\',\n        className: \'p-4 border-t dark:border-gray-700\'\n      }, [\n        typeof parsedData === \'object\' && parsedData !== null\n          ? Object.entries(parsedData).map(([key, value]) =>\n              renderConfigSection(value, key)\n            )\n          : React.createElement(\'pre\', {\n              className: \'text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap font-mono\'\n            }, data.output)\n      ])\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};',0,1,'2025-04-02 15:24:11','2025-07-08 15:18:13'),(57,'Patches Applied','echo -e \"1\\n1\" | vendor/bin/ece-patches status -n | grep \"Applied\"','<p>Show all patches applied</p>','ssh',0,1,1,'const AppliedPatchesComponent = ({ data }) => {\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'object\') {\n        return output;\n      }\n      \n      // Try to parse as JSON\n      return JSON.parse(output);\n    } catch (e) {\n      // If not JSON, process as string\n      return output;\n    }\n  };\n\n  const parseTableData = (rawOutput) => {\n    if (!rawOutput || typeof rawOutput !== \'string\') {\n      return [];\n    }\n\n    // Split by newlines and filter out empty lines or separator lines\n    const lines = rawOutput.split(\'\\n\').filter(line => \n      line.trim() && !line.includes(\'═\') && !line.includes(\'╔\') && !line.includes(\'╚\') && !line.includes(\'╟\')\n    );\n\n    return lines.map(line => {\n      // Remove the first and last ║ characters\n      const cleanLine = line.replace(/^║\\s*|\\s*║$/g, \'\');\n      \n      // Split by │ delimiter\n      const columns = cleanLine.split(\'│\').map(col => col.trim());\n      \n      // Return structured data\n      if (columns.length >= 6) {\n        return {\n          id: columns[0],\n          description: columns[1],\n          category: columns[2],\n          source: columns[3],\n          status: columns[4],\n          type: columns[5]\n        };\n      }\n      return null;\n    }).filter(Boolean);\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No patch data available\');\n    }\n\n    const parsedOutput = parseOutput(data.output);\n    const patches = parseTableData(parsedOutput);\n\n    if (!patches.length) {\n      return React.createElement(\'div\', {\n        className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'node-id\',\n          className: \'text-xs text-gray-400 dark:text-gray-500 mb-2\'\n        }, `Node ${data.nodeId}`),\n        React.createElement(\'div\', {\n          key: \'no-patches\',\n          className: \'text-sm text-gray-600 dark:text-gray-300\'\n        }, \'No applied patches found or unable to parse patch data.\')\n      ]);\n    }\n\n    // Group patches by type\n    const patchesByType = patches.reduce((acc, patch) => {\n      const type = patch.type.includes(\'Required\') ? \'Required\' : \n                  patch.type.includes(\'Optional\') ? \'Optional\' : \'Custom\';\n      if (!acc[type]) acc[type] = [];\n      acc[type].push(patch);\n      return acc;\n    }, {});\n\n    // Count patches by category\n    const categoryCounts = patches.reduce((acc, patch) => {\n      const category = patch.category.trim();\n      acc[category] = (acc[category] || 0) + 1;\n      return acc;\n    }, {});\n\n    // Create collapsible sections\n    return React.createElement(\'div\', {\n      className: \'bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200 overflow-hidden\'\n    }, [\n      // Header with summary\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'p-4 border-b dark:border-gray-700\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'node-id\',\n          className: \'text-xs text-gray-400 dark:text-gray-500 mb-1\'\n        }, `Node ${data.nodeId}`),\n        React.createElement(\'div\', {\n          key: \'title\',\n          className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\'\n        }, \'Applied Patches\'),\n        React.createElement(\'div\', {\n          key: \'summary\',\n          className: \'text-sm text-gray-600 dark:text-gray-300 mt-2\'\n        }, `Total: ${patches.length} patches (${patchesByType.Required?.length || 0} Required, ${patchesByType.Optional?.length || 0} Optional, ${patchesByType.Custom?.length || 0} Custom)`)\n      ]),\n\n      // Patches table\n      React.createElement(\'div\', {\n        key: \'table-container\',\n        className: \'overflow-x-auto\'\n      }, \n        React.createElement(\'table\', {\n          className: \'min-w-full divide-y divide-gray-200 dark:divide-gray-700\'\n        }, [\n          React.createElement(\'thead\', {\n            key: \'thead\',\n            className: \'bg-gray-50 dark:bg-gray-700\'\n          }, \n            React.createElement(\'tr\', null, [\n              React.createElement(\'th\', {\n                key: \'th-id\',\n                className: \'px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\'\n              }, \'Patch ID\'),\n              React.createElement(\'th\', {\n                key: \'th-desc\',\n                className: \'px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\'\n              }, \'Description\'),\n              React.createElement(\'th\', {\n                key: \'th-cat\',\n                className: \'px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\'\n              }, \'Category\'),\n              React.createElement(\'th\', {\n                key: \'th-source\',\n                className: \'px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\'\n              }, \'Source\'),\n              React.createElement(\'th\', {\n                key: \'th-type\',\n                className: \'px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\'\n              }, \'Type\')\n            ])\n          ),\n          React.createElement(\'tbody\', {\n            key: \'tbody\',\n            className: \'bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700\'\n          }, \n            patches.map((patch, index) => \n              React.createElement(\'tr\', {\n                key: `patch-${index}`,\n                className: `${index % 2 === 0 ? \'bg-white dark:bg-gray-800\' : \'bg-gray-50 dark:bg-gray-700\'} hover:bg-gray-100 dark:hover:bg-gray-600`\n              }, [\n                React.createElement(\'td\', {\n                  key: `id-${index}`,\n                  className: \'px-4 py-3 text-sm font-medium text-gray-900 dark:text-gray-100\'\n                }, patch.id),\n                React.createElement(\'td\', {\n                  key: `desc-${index}`,\n                  className: \'px-4 py-3 text-sm text-gray-500 dark:text-gray-300\'\n                }, patch.description),\n                React.createElement(\'td\', {\n                  key: `cat-${index}`,\n                  className: \'px-4 py-3 text-sm text-gray-500 dark:text-gray-300\'\n                }, patch.category),\n                React.createElement(\'td\', {\n                  key: `source-${index}`,\n                  className: \'px-4 py-3 text-sm text-gray-500 dark:text-gray-300\'\n                }, patch.source),\n                React.createElement(\'td\', {\n                  key: `type-${index}`,\n                  className: `px-4 py-3 text-sm ${\n                    patch.type.includes(\'Required\') ? \'text-red-600 dark:text-red-400\' : \n                    patch.type.includes(\'Optional\') ? \'text-blue-600 dark:text-blue-400\' : \n                    \'text-purple-600 dark:text-purple-400\'\n                  }`\n                }, patch.type.replace(\'Patch type: \', \'\'))\n              ])\n            )\n          )\n        ])\n      )\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, `Error processing patch data: ${error.message}`);\n  }\n};',0,1,'2025-04-04 11:43:43','2025-07-08 15:18:12'),(58,'php.ini','cat php.ini','<p>PHP.ini content</p>','ssh',0,1,1,'const PhpIniComponent = ({ data }) => {\n  const [isCollapsed, setIsCollapsed] = React.useState(false);\n\n  const toggleCollapse = () => {\n    setIsCollapsed(!isCollapsed);\n  };\n\n  const parsePhpIniContent = (output) => {\n    try {\n      // Check if output is already an object\n      if (typeof output === \'object\' && !Array.isArray(output)) {\n        return output;\n      }\n      \n      // If it\'s a string, try to parse it\n      if (typeof output === \'string\') {\n        // First try to parse as JSON\n        try {\n          return JSON.parse(output);\n        } catch (e) {\n          // If not JSON, just return the string\n          return output;\n        }\n      }\n      \n      return output;\n    } catch (error) {\n      console.error(\"Error parsing PHP.ini content:\", error);\n      return \"Error parsing PHP.ini content\";\n    }\n  };\n\n  const renderPhpIniContent = (content) => {\n    if (!content) return null;\n\n    // Split the content by newlines\n    const lines = content.split(\'\\n\');\n    \n    return lines.map((line, index) => {\n      // Determine if this is a section comment, directive, or empty line\n      const isSectionComment = line.trim().startsWith(\';\') && line.trim().length > 1 && !line.includes(\'=\');\n      const isDirective = line.includes(\'=\');\n      const isEmpty = line.trim() === \'\';\n      \n      let className = \'font-mono text-sm whitespace-pre\';\n      \n      if (isSectionComment) {\n        className += \' text-blue-600 dark:text-blue-400 font-semibold mt-3 first:mt-0\';\n      } else if (isDirective) {\n        className += \' text-gray-900 dark:text-gray-100\';\n      } else if (isEmpty) {\n        className += \' h-2\';\n      } else {\n        className += \' text-gray-500 dark:text-gray-400\';\n      }\n      \n      return React.createElement(\'div\', {\n        key: `line-${index}`,\n        className\n      }, line);\n    });\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No PHP.ini data available\');\n    }\n\n    const parsedOutput = parsePhpIniContent(data.output);\n\n    return React.createElement(\'div\', {\n      className: \'bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200 overflow-hidden\'\n    }, [\n      // Header with toggle button\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'flex justify-between items-center p-4 border-b dark:border-gray-700 cursor-pointer\',\n        onClick: toggleCollapse\n      }, [\n        React.createElement(\'div\', {\n          key: \'title-container\',\n          className: \'flex items-center\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'node-id\',\n            className: \'text-xs text-gray-400 dark:text-gray-500 mr-2\'\n          }, `Node ${data.nodeId}`),\n          React.createElement(\'h3\', {\n            key: \'title\',\n            className: \'font-semibold text-gray-900 dark:text-gray-100\'\n          }, \'PHP.ini Configuration\')\n        ]),\n        React.createElement(\'div\', {\n          key: \'toggle-icon\',\n          className: \'text-gray-500 dark:text-gray-400\'\n        }, isCollapsed ? \'▼\' : \'▲\')\n      ]),\n      \n      // Content section (collapsible)\n      !isCollapsed && React.createElement(\'div\', {\n        key: \'content\',\n        className: \'p-4 max-h-[500px] overflow-y-auto\'\n      }, typeof parsedOutput === \'string\' \n          ? renderPhpIniContent(parsedOutput)\n          : React.createElement(\'pre\', {\n              className: \'font-mono text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap\'\n            }, JSON.stringify(parsedOutput, null, 2))\n      )\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing PHP.ini data\');\n  }\n};',0,1,'2025-04-12 14:17:51','2025-07-08 15:18:10'),(60,'PHP Details','echo -e \"\\n\\n========== PHP PROCESS STATS ==========\"; \\\nps -eo pid,pcpu,rss,etime,command --sort=pid | grep -i php | grep -vE \"awk|grep\" | awk \'tolower($5) ~ /^php(-fpm)?(:)?/ || tolower($0) ~ /php/ {\n  pid=$1; cpu=$2; rss=$3; elapsed=$4;\n  $1=$2=$3=$4=\"\"; cmd=substr($0,5);\n  printf \"PID: %-7s | RSS: %6.2f MB | CPU: %5s%% | ELAPSED: %-12s | CMD: %s\\n\", pid, rss/1024, cpu, elapsed, cmd\n}\'; \\\nphp_worker_count=$(ps -eo cmd | grep -c \'php-fpm: pool\'); \\\nfpm_confs=$(ps -eo cmd | grep \'php-fpm: master process\' | grep -oP \'\\(.*?\\)\' | tr -d \'()\' | paste -sd, -); \\\nmemory_limit=$(php -r \'echo ini_get(\"memory_limit\");\'); \\\nphp_fpm_max_children=$(grep -hri \'pm.max_children\' $(echo $fpm_confs | tr \',\' \' \') 2>/dev/null | grep -vE \'^\\s*;|^#\' | head -n1 | awk -F= \'{gsub(/ /,\"\",$2); print $2}\'); \\\n[ -z \"$php_fpm_max_children\" ] && php_fpm_max_children=\"(unknown)\"; \\\necho -e \"\\n\\n========== PHP ENVIRONMENT SUMMARY ==========\"; \\\necho \"Active PHP Workers:                   $php_worker_count\"; \\\necho \"Configured max_children (FPM):        $php_fpm_max_children\"; \\\necho \"memory_limit (FPM & CLI):            $memory_limit\"','<p>Details about PHP-FPM and PHP-CLI</p>','ssh',1,1,1,'const PhpProcessStatsComponent = ({ data }) => {\n    const [isOpen, setIsOpen] = React.useState(true);\n    const [sortBy, setSortBy] = React.useState(\'rss\');\n    const [sortOrder, setSortOrder] = React.useState(\'desc\');\n    const [expandedRows, setExpandedRows] = React.useState(new Set());\n\n    const parseOutput = (output) => {\n        if (typeof output !== \'string\') {\n            throw new Error(\"Invalid output format: not a string.\");\n        }\n        const lines = output.split(\'\\n\').filter(line => line.trim() !== \'\');\n        const processStats = [];\n        const envSummary = {};\n        let currentSection = null;\n        lines.forEach(line => {\n            if (line.includes(\'========== PHP PROCESS STATS ==========\')) {\n                currentSection = \'stats\'; return;\n            }\n            if (line.includes(\'========== PHP ENVIRONMENT SUMMARY ==========\')) {\n                currentSection = \'summary\'; return;\n            }\n            if (currentSection === \'stats\') {\n                const match = line.match(/PID:\\s*(\\S+)\\s*\\|\\s*RSS:\\s*([\\d.]+)\\s*MB\\s*\\|\\s*CPU:\\s*([\\d.]+)%\\s*\\|\\s*ELAPSED:\\s*(\\S+)\\s*\\|\\s*CMD:\\s*(.*)/);\n                if (match) {\n                    processStats.push({ pid: match[1], rss: parseFloat(match[2]), cpu: parseFloat(match[3]), elapsed: match[4], cmd: match[5].trim() });\n                }\n            } else if (currentSection === \'summary\') {\n                const parts = line.split(\':\');\n                if (parts.length >= 2) {\n                    const key = parts[0].trim();\n                    const value = parts.slice(1).join(\':\').trim();\n                    envSummary[key] = value;\n                }\n            }\n        });\n        if (processStats.length === 0 && Object.keys(envSummary).length === 0) {\n            throw new Error(\"Failed to parse output.\");\n        }\n        return { processes: processStats, summary: envSummary };\n    };\n\n    const sortProcesses = (processes) => {\n        return [...processes].sort((a, b) => {\n            let aVal = a[sortBy];\n            let bVal = b[sortBy];\n            if (sortBy === \'pid\') { aVal = parseInt(aVal); bVal = parseInt(bVal); }\n            if (sortOrder === \'asc\') { return aVal > bVal ? 1 : -1; } \n            else { return aVal < bVal ? 1 : -1; }\n        });\n    };\n\n    const handleSort = (field) => {\n        if (sortBy === field) {\n            setSortOrder(sortOrder === \'asc\' ? \'desc\' : \'asc\');\n        } else {\n            setSortBy(field);\n            setSortOrder(\'desc\');\n        }\n    };\n\n    const getSortIcon = (field) => {\n        if (sortBy !== field) return \'\';\n        return sortOrder === \'asc\' ? \' ↑\' : \' ↓\';\n    };\n\n    const getProcessType = (cmd) => {\n        if (cmd.includes(\'master process\')) return \'Master\';\n        if (cmd.includes(\'pool\')) return \'Worker\';\n        if (cmd.includes(\'runsv\')) return \'Supervisor\';\n        if (cmd.includes(\'php \') && !cmd.includes(\'php-fpm\')) return \'CLI\';\n        return \'Other\';\n    };\n\n    const toggleRowExpansion = (pid) => {\n        const newExpanded = new Set(expandedRows);\n        if (newExpanded.has(pid)) { newExpanded.delete(pid); } \n        else { newExpanded.add(pid); }\n        setExpandedRows(newExpanded);\n    };\n\n    try {\n        if (!data || !data.output) {\n            return React.createElement(\'div\', { className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800\' }, \'No data available\');\n        }\n\n        const parsedData = parseOutput(data.output);\n        const { processes, summary } = parsedData;\n        const sortedProcesses = sortProcesses(processes);\n\n        const activeWorkers = parseInt(summary[\'Active PHP Workers\'], 10) || 0;\n        const maxChildren = parseInt(summary[\'Configured max_children (FPM)\'], 10) || 0;\n        const workerUsagePercentage = maxChildren > 0 ? (activeWorkers / maxChildren) * 100 : 0;\n        const totalMemory = processes.reduce((acc, p) => acc + p.rss, 0);\n        const avgCpu = processes.length > 0 ? processes.reduce((acc, p) => acc + p.cpu, 0) / processes.length : 0;\n\n        const getUsageColor = (percentage) => {\n            if (percentage > 90) return \'bg-red-500\';\n            if (percentage > 70) return \'bg-yellow-500\';\n            return \'bg-green-500\';\n        };\n\n        const MetricCard = ({ label, value, subtitle }) => React.createElement(\'div\', { className: \'flex flex-col\' }, [\n            React.createElement(\'div\', { key: \'label\', className: \'text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide\' }, label),\n            React.createElement(\'div\', { key: \'value\', className: \'text-lg font-semibold text-gray-900 dark:text-gray-100 mt-1\' }, value),\n            subtitle && React.createElement(\'div\', { key: \'subtitle\', className: \'text-xs text-gray-500 dark:text-gray-400\' }, subtitle)\n        ]);\n\n        // THE FIX: Background colors are now part of the TableHeader component itself.\n        const TableHeader = ({ field, label, className = \'\' }) => React.createElement(\'th\', {\n            key: field,\n            className: `bg-gray-50 dark:bg-gray-700 px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider cursor-pointer ${className}`,\n            onClick: () => handleSort(field)\n        }, label + getSortIcon(field));\n        \n        const CompactTableRow = ({ process, index }) => {\n            const isExpanded = expandedRows.has(process.pid);\n            const baseRowClass = `hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer`;\n            const evenRowClass = `bg-white dark:bg-gray-800`;\n            const oddRowClass =  `bg-gray-50 dark:bg-gray-900`;\n            const rowClass = `${baseRowClass} ${index % 2 === 0 ? evenRowClass : oddRowClass} text-gray-900 dark:text-gray-100`;\n            \n            return React.createElement(React.Fragment, { key: process.pid }, [\n                React.createElement(\'tr\', {\n                    key: `${process.pid}-main`, className: rowClass, onClick: () => toggleRowExpansion(process.pid)\n                }, [\n                    React.createElement(\'td\', { key: \'expand\', className: \'px-3 py-2 text-center\' }, \n                        React.createElement(\'svg\', { className: `w-4 h-4 text-gray-500 dark:text-gray-400 transform transition-transform ${isExpanded ? \'rotate-90\' : \'\'}`, fill: \'none\', viewBox: \'0 0 24 24\', stroke: \'currentColor\' }, React.createElement(\'path\', { strokeLinecap: \'round\', strokeLinejoin: \'round\', strokeWidth: 2, d: \'M9 5l7 7-7 7\' }))\n                    ),\n                    React.createElement(\'td\', { key: \'type\', className: \'px-3 py-2 text-sm font-medium\' }, getProcessType(process.cmd)),\n                    React.createElement(\'td\', { key: \'rss\', className: \'px-3 py-2 text-sm font-mono text-right\' }, React.createElement(\'span\', { className: \'inline-block\' }, [\n                        process.rss.toFixed(1), \n                        React.createElement(\'span\', { key: \'unit\', className: \'text-xs text-gray-500 dark:text-gray-400 ml-1\' }, \'MB\')\n                    ])),\n                    React.createElement(\'td\', { key: \'cpu\', className: \'px-3 py-2 text-sm font-mono text-right\' }, React.createElement(\'span\', { className: \'inline-block\' }, [\n                        process.cpu.toFixed(1),\n                        React.createElement(\'span\', { key: \'unit\', className: \'text-xs text-gray-500 dark:text-gray-400 ml-1\' }, \'%\')\n                    ]))\n                ]),\n                isExpanded && React.createElement(\'tr\', {\n                    key: `${process.pid}-details`, className: index % 2 === 0 ? evenRowClass : oddRowClass \n                }, React.createElement(\'td\', { colSpan: 4, className: \'px-3 py-3 bg-gray-100/50 dark:bg-black/20\' \n                }, React.createElement(\'div\', { className: \'space-y-2 text-sm text-gray-700 dark:text-gray-300\' \n                }, [\n                    React.createElement(\'div\', { key: \'pid\', className: \'flex justify-between\' }, [\n                        React.createElement(\'span\', { className: \'font-medium text-gray-500 dark:text-gray-400\' }, \'Process ID:\'),\n                        React.createElement(\'span\', { className: \'font-mono text-gray-900 dark:text-gray-100\' }, process.pid)\n                    ]),\n                    React.createElement(\'div\', { key: \'elapsed\', className: \'flex justify-between\' }, [\n                        React.createElement(\'span\', { className: \'font-medium text-gray-500 dark:text-gray-400\' }, \'Elapsed Time:\'),\n                        React.createElement(\'span\', { className: \'font-mono text-gray-900 dark:text-gray-100\' }, process.elapsed)\n                    ]),\n                    React.createElement(\'div\', { key: \'full-cmd\', className: \'flex flex-col mt-2\' }, [\n                        React.createElement(\'span\', { className: \'font-medium text-gray-500 dark:text-gray-400 mb-1\' }, \'Command:\'),\n                        React.createElement(\'span\', { className: \'font-mono text-xs text-gray-800 dark:text-gray-200 bg-gray-200/60 dark:bg-white/5 p-2 rounded break-all\' }, process.cmd)\n                    ])\n                ])))\n            ]);\n        };\n\n        return React.createElement(\'div\', { className: \'bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm\' }, [\n            React.createElement(\'div\', { key: \'header\', className: \'px-4 py-3 border-b border-gray-200 dark:border-gray-700\' }, [\n                React.createElement(\'div\', { key: \'title-row\', className: \'flex items-center justify-between\' }, [\n                    React.createElement(\'div\', { key: \'title-section\' }, [\n                        React.createElement(\'h3\', { key: \'title\', className: \'text-lg font-semibold text-gray-900 dark:text-gray-100\' }, \'PHP Environment\'),\n                        React.createElement(\'p\', { key: \'subtitle\', className: \'text-sm text-gray-500 dark:text-gray-400\' }, `Node ${data.nodeId}`)\n                    ]),\n                    React.createElement(\'button\', { key: \'toggle\', className: \'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded-full\', onClick: () => setIsOpen(!isOpen) }, \n                        React.createElement(\'svg\', { className: `w-5 h-5 transform transition-transform ${isOpen ? \'rotate-180\' : \'\'}`, fill: \'none\', viewBox: \'0 0 24 24\', stroke: \'currentColor\' }, \n                            React.createElement(\'path\', { strokeLinecap: \'round\', strokeLinejoin: \'round\', strokeWidth: 2, d: \'M19 9l-7 7-7-7\' })\n                        )\n                    )\n                ])\n            ]),\n            isOpen && React.createElement(\'div\', { key: \'content\', className: \'p-4\' }, [\n                React.createElement(\'div\', { key: \'metrics\', className: \'grid grid-cols-2 md:grid-cols-5 gap-4 mb-4 pb-4 border-b border-gray-200 dark:border-gray-700\' }, [\n                    React.createElement(MetricCard, { key: \'processes\', label: \'Processes\', value: processes.length, subtitle: \'Total running\' }),\n                    React.createElement(MetricCard, { key: \'workers\', label: \'Workers\', value: `${activeWorkers}/${maxChildren || \'N/A\'}`, subtitle: maxChildren > 0 ? `${workerUsagePercentage.toFixed(0)}% used` : \'No limit\' }),\n                    React.createElement(MetricCard, { key: \'memory\', label: \'Total Memory\', value: `${totalMemory.toFixed(1)} MB`, subtitle: `Limit: ${summary[\'memory_limit (FPM & CLI)\'] || \'N/A\'}` }),\n                    React.createElement(MetricCard, { key: \'cpu\', label: \'Avg CPU\', value: `${avgCpu.toFixed(1)}%`, subtitle: \'Across all processes\' }),\n                    maxChildren > 0 && React.createElement(\'div\', { key: \'usage-bar\', className: \'col-span-2 md:col-span-1 flex flex-col justify-center\' }, [\n                        React.createElement(\'div\', { key: \'usage-label\', className: \'text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wide mb-2\' }, \'Pool Usage\'),\n                        React.createElement(\'div\', { key: \'progress\', className: \'w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5\' }, \n                            React.createElement(\'div\', { className: `h-2.5 rounded-full ${getUsageColor(workerUsagePercentage)}`, style: { width: `${workerUsagePercentage}%` } })\n                        )\n                    ])\n                ]),\n                React.createElement(\'div\', { key: \'table-container\', className: \'overflow-x-auto\' }, [\n                    React.createElement(\'div\', { key: \'table-hint\', className: \'text-xs text-gray-500 dark:text-gray-400 mb-2\' }, \'Click on any row to expand details\'),\n                    // THE FIX: Added \'border-separate\' to the table for rounded corners to work.\n                    React.createElement(\'table\', { className: \'min-w-full border-separate\', style: { borderSpacing: 0 } }, [\n                        React.createElement(\'thead\', { key: \'thead\' }, \n                            React.createElement(\'tr\', {}, [\n                                // THE FIX: Styling each <th> directly and adding rounded corners.\n                                React.createElement(\'th\', { key: \'expand\', className: \'bg-gray-50 dark:bg-gray-700 px-3 py-2 w-8 rounded-tl-md\' }, \'\'),\n                                React.createElement(TableHeader, { key: \'cmd\', field: \'cmd\', label: \'Type\' }),\n                                React.createElement(TableHeader, { key: \'rss\', field: \'rss\', label: \'Memory\', className: \'text-right\' }),\n                                React.createElement(TableHeader, { key: \'cpu\', field: \'cpu\', label: \'CPU\', className: \'text-right rounded-tr-md\' })\n                            ])\n                        ),\n                        React.createElement(\'tbody\', { key: \'tbody\', className: \'divide-y divide-gray-200 dark:divide-gray-700\' },\n                            sortedProcesses.map((process, index) => React.createElement(CompactTableRow, { key: process.pid, process, index }))\n                        )\n                    ])\n                ])\n            ])\n        ]);\n\n    } catch (error) {\n        return React.createElement(\'div\', { className: \'text-red-600 dark:text-red-400 p-4 border border-red-200 dark:border-red-700 bg-red-50 dark:bg-red-900/20 rounded-lg\' }, [\n            React.createElement(\'strong\', { key: \'error-title\' }, \'Error: \'),\n            `Failed to process PHP stats for Node ${data.nodeId}. ${error.message}`\n        ]);\n    }\n};',0,1,'2025-07-09 16:44:37','2025-07-18 00:03:56'),(61,'.magento.app.yaml','magento-cloud repo:cat .magento.app.yaml -p :projectid -e :environment','<p>Content of the file .magento.app.yaml</p>','bash',0,1,1,'const MagentoEnvConfigComponent = ({ data }) => {\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'string\') {\n        return jsyaml.load(output);\n      }\n      return output;\n    } catch (error) {\n      return output;\n    }\n  };\n\n  const renderValue = (value) => {\n    if (typeof value === \'boolean\') {\n      return React.createElement(\'span\', {\n        className: `px-2 py-1 rounded text-xs ${value ? \'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\' : \'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\'}`\n      }, value.toString());\n    }\n    return React.createElement(\'span\', {\n      className: \'text-gray-700 dark:text-gray-300 font-mono text-sm\'\n    }, value);\n  };\n\n  const renderConfigSection = (section, sectionName) => {\n    return React.createElement(\'div\', {\n      key: sectionName,\n      className: \'mb-4\'\n    }, [\n      React.createElement(\'h3\', {\n        key: `${sectionName}-title`,\n        className: \'text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2\'\n      }, sectionName),\n      React.createElement(\'div\', {\n        key: `${sectionName}-content`,\n        className: \'pl-4 border-l-2 border-gray-200 dark:border-gray-600\'\n      }, Object.entries(section).map(([key, value]) => {\n        if (typeof value === \'object\' && value !== null) {\n          return renderConfigSection(value, key);\n        }\n        return React.createElement(\'div\', {\n          key: key,\n          className: \'flex items-center justify-between py-1\'\n        }, [\n          React.createElement(\'span\', {\n            key: `${key}-label`,\n            className: \'text-gray-600 dark:text-gray-400 text-sm\'\n          }, key),\n          renderValue(value)\n        ]);\n      }))\n    ]);\n  };\n\n  try {\n    if (!data || !data.output) {\n      return React.createElement(\'div\', {\n        className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n      }, \'No data available\');\n    }\n\n    const parsedData = parseOutput(data.output);\n\n    return React.createElement(\'div\', {\n      className: \'bg-white dark:bg-gray-800 rounded-lg border dark:border-gray-700 hover:shadow-md transition-shadow duration-200\'\n    }, [\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'p-4 cursor-pointer flex justify-between items-center\',\n        onClick: () => setIsExpanded(!isExpanded)\n      }, [\n        React.createElement(\'div\', {\n          className: \'flex items-center\'\n        }, [\n          React.createElement(\'span\', {\n            className: \'text-xs text-gray-400 dark:text-gray-500\'\n          }, `Node ${data.nodeId}`),\n          React.createElement(\'span\', {\n            className: \'ml-2 text-sm font-medium text-gray-700 dark:text-gray-300\'\n          }, \'.magento.app.yaml\')\n        ]),\n        React.createElement(\'svg\', {\n          className: `w-5 h-5 text-gray-500 dark:text-gray-400 transform transition-transform ${isExpanded ? \'rotate-180\' : \'\'}`,\n          fill: \'none\',\n          strokeLinecap: \'round\',\n          strokeLinejoin: \'round\',\n          strokeWidth: \'2\',\n          viewBox: \'0 0 24 24\',\n          stroke: \'currentColor\'\n        }, React.createElement(\'path\', {\n          d: \'M19 9l-7 7-7-7\'\n        }))\n      ]),\n      isExpanded && React.createElement(\'div\', {\n        key: \'content\',\n        className: \'p-4 border-t dark:border-gray-700\'\n      }, [\n        typeof parsedData === \'object\' && parsedData !== null\n          ? Object.entries(parsedData).map(([key, value]) =>\n              renderConfigSection(value, key)\n            )\n          : React.createElement(\'pre\', {\n              className: \'text-sm text-gray-600 dark:text-gray-300 whitespace-pre-wrap font-mono\'\n            }, data.output)\n      ])\n    ]);\n  } catch (error) {\n    return React.createElement(\'div\', {\n      className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg\'\n    }, \'Error processing data\');\n  }\n};\n',0,1,'2025-07-21 14:44:22','2025-07-21 15:16:35'),(62,'Node Checksum','ls -lR init/pub/static|md5sum && ls -lR app|md5sum && ls -lR vendor|md5sum','<p>Check if all the nodes are in sync</p>','ssh',1,0,1,'const NodeSyncStatus = ({ data }) => {\n    const parseOutput = (output) => {\n        if (typeof output !== \'string\') {\n            return [];\n        }\n        return output.trim().split(\'\\n\')\n            .map(line => line.trim().split(/\\s+/)[0])\n            .filter(hash => hash && hash.length > 10);\n    };\n\n    try {\n        if (!data || !data.output) {\n            return React.createElement(\'div\', {\n                className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800\'\n            }, \'No data available\');\n        }\n\n        const hashes = parseOutput(data.output);\n        if (hashes.length === 0) {\n            return React.createElement(\'div\', {\n                className: \'text-gray-500 dark:text-gray-400 p-4 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800\'\n            }, \'Invalid or empty checksum data\');\n        }\n\n        const labels = [\'static content\', \'application\', \'vendor\'];\n        const hashElements = hashes.map((hash, index) =>\n            React.createElement(\'div\', {\n                key: `hash-row-${index}`,\n                className: \'flex justify-between items-center py-3\'\n            }, [\n                React.createElement(\'p\', {\n                    key: \'label\',\n                    className: \'text-sm text-gray-500 dark:text-gray-400 font-medium truncate\'\n                }, labels[index] || `checksum ${index + 1}`),\n                React.createElement(\'p\', {\n                    key: \'hash-text\',\n                    className: \'font-mono text-xs text-gray-600 dark:text-gray-300 truncate\'\n                }, hash)\n            ])\n        );\n\n        return React.createElement(\n            \'details\',\n            {\n                className: \'p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 hover:shadow-lg transition-shadow duration-300\'\n            },\n            React.createElement(\'summary\', {\n                className: \'flex justify-between items-center mb-3 cursor-pointer\'\n            }, [\n                React.createElement(\'h3\', {\n                    key: \'title\',\n                    className: \'font-semibold text-base text-gray-700 dark:text-gray-200\'\n                }, \'node integrity state\'),\n                React.createElement(\'p\', {\n                    key: \'node-id\',\n                    className: \'text-xs text-gray-400 dark:text-gray-500\'\n                }, `node ${data.nodeId}`)\n            ]),\n            React.createElement(\'div\', {\n                key: \'content\',\n                className: \'flex flex-col divide-y divide-gray-200 dark:divide-gray-700 pt-2\'\n            }, hashElements)\n        );\n\n    } catch (error) {\n        return React.createElement(\'div\', {\n            className: \'text-red-500 dark:text-red-400 p-4 border border-red-200 dark:border-red-700 rounded-lg bg-white dark:bg-gray-800\'\n        }, `Error processing data: ${error.message}`);\n    }\n};\n',0,1,'2025-07-21 14:53:36','2025-07-21 15:22:29'),(63,'MariaDB Load','hostname &&\nmysql -N \\\n  -u$(echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | jq -r \'.database[0].username\') \\\n  -p$(echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | jq -r \'.database[0].password\') \\\n  -D$(echo $MAGENTO_CLOUD_RELATIONSHIPS | base64 -d | jq -r \'.database[0].path\') \\\n  -h127.0.0.1 \\\n  -P3307 \\\n  -e \"SHOW GLOBAL STATUS WHERE Variable_name IN (\n    \'Com_select\',\n    \'wsrep_local_commits\',\n    \'wsrep_causal_reads\',\n    \'wsrep_replicated\',\n    \'wsrep_received\'\n  );\" | awk \'\n    function format_number(n) {\n      len=length(n);\n      for(i=len-3;i>0;i-=3) n=substr(n,1,i) \",\" substr(n,i+1);\n      return n\n    }\n    {\n      if($1==\"Com_select\")\n        print \"Total reads (SELECT statements): \" format_number($2);\n      else if($1==\"wsrep_causal_reads\")\n        print \"Synchronized reads: \" format_number($2);\n      else if($1==\"wsrep_local_commits\")\n        print \"Writes committed in this node: \" format_number($2);\n      else if($1==\"wsrep_replicated\")\n        print \"Writes originated in this node and replicated to other nodes: \" format_number($2);\n      else if($1==\"wsrep_received\")\n        print \"Write sets received from other nodes: \" format_number($2);\n    }\'\n','<p>Show data about MariaDB Load</p>','ssh',1,0,1,'const DatabaseReadWriteStats = ({ data }) => {\n  const [tooltip, setTooltip] = React.useState(null);\n  const [isCompact, setIsCompact] = React.useState(false);\n  const containerRef = React.useRef(null);\n\n  React.useEffect(() => {\n    const checkSize = () => {\n      if (containerRef.current) {\n        const width = containerRef.current.offsetWidth;\n        setIsCompact(width < 250);\n      }\n    };\n\n    checkSize();\n    const resizeObserver = new ResizeObserver(checkSize);\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    return () => {\n      if (containerRef.current) {\n        resizeObserver.unobserve(containerRef.current);\n      }\n    };\n  }, []);\n\n  const parseOutput = (output) => {\n    try {\n      if (typeof output === \'object\') return output;\n      if (typeof output === \'string\') {\n        try {\n          return JSON.parse(output);\n        } catch {\n          const lines = output.split(\'\\n\').filter(line => line.trim());\n          const parsed = {};\n          let nodeId = null;\n          \n          lines.forEach((line, index) => {\n            if (index === 0 && !line.includes(\':\')) {\n              nodeId = line.trim();\n            } else if (line.includes(\':\')) {\n              const [key, value] = line.split(\':\').map(s => s.trim());\n              const numValue = value.replace(/,/g, \'\').match(/\\d+/);\n              parsed[key] = numValue ? parseInt(numValue[0]) : value;\n            }\n          });\n          \n          if (nodeId) parsed.nodeId = nodeId;\n          return parsed;\n        }\n      }\n      return output;\n    } catch {\n      return output;\n    }\n  };\n\n  const formatNumber = (num) => {\n    if (num >= 1e9) return (num / 1e9).toFixed(1) + \'B\';\n    if (num >= 1e6) return (num / 1e6).toFixed(1) + \'M\';\n    if (num >= 1e3) return (num / 1e3).toFixed(0) + \'K\';\n    return num.toString();\n  };\n\n  if (!data || !data.output) {\n    return React.createElement(\'div\', {\n      className: \'text-sm text-gray-500 dark:text-gray-400 p-3\'\n    }, \'No data available\');\n  }\n\n  const parsedData = parseOutput(data.output);\n  const displayNodeId = parsedData.nodeId || data.nodeId;\n  \n  const totalReads = parsedData[\'Total reads (SELECT statements)\'] || 0;\n  const writesOriginated = parsedData[\'Writes originated in this node and replicated to other nodes\'] || 0;\n  const writesReceived = parsedData[\'Write sets received from other nodes\'] || 0;\n  const writesCommitted = parsedData[\'Writes committed in this node\'] || 0;\n  const syncReads = parsedData[\'Synchronized reads\'] || 0;\n  \n  const totalWrites = writesOriginated + writesReceived + writesCommitted;\n  const total = totalReads + totalWrites;\n  \n  const readPct = total > 0 ? (totalReads / total) * 100 : 0;\n  const writePct = total > 0 ? (totalWrites / total) * 100 : 0;\n\n  // Donut chart calculations\n  const size = isCompact ? 80 : 100;\n  const strokeWidth = isCompact ? 12 : 16;\n  const radius = (size - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n  const readOffset = (readPct / 100) * circumference;\n  const writeOffset = (writePct / 100) * circumference;\n\n  const createDonutChart = () => {\n    return React.createElement(\'div\', { className: \'relative\' }, [\n      React.createElement(\'svg\', {\n        key: \'svg\',\n        width: size,\n        height: size,\n        className: \'transform -rotate-90\'\n      }, [\n        // Background circle\n        React.createElement(\'circle\', {\n          key: \'bg\',\n          cx: size / 2,\n          cy: size / 2,\n          r: radius,\n          fill: \'none\',\n          stroke: \'currentColor\',\n          strokeWidth: strokeWidth,\n          className: \'text-gray-200 dark:text-gray-700\'\n        }),\n        // Reads arc\n        React.createElement(\'circle\', {\n          key: \'reads\',\n          cx: size / 2,\n          cy: size / 2,\n          r: radius,\n          fill: \'none\',\n          stroke: \'#3b82f6\',\n          strokeWidth: strokeWidth,\n          strokeDasharray: `${readOffset} ${circumference}`,\n          strokeDashoffset: 0,\n          className: \'transition-all duration-500 cursor-pointer\',\n          onMouseEnter: (e) => setTooltip({\n            x: e.clientX,\n            y: e.clientY,\n            content: `Reads: ${formatNumber(totalReads)} (${readPct.toFixed(1)}%)`\n          }),\n          onMouseLeave: () => setTooltip(null)\n        }),\n        // Writes arc\n        React.createElement(\'circle\', {\n          key: \'writes\',\n          cx: size / 2,\n          cy: size / 2,\n          r: radius,\n          fill: \'none\',\n          stroke: \'#ef4444\',\n          strokeWidth: strokeWidth,\n          strokeDasharray: `${writeOffset} ${circumference}`,\n          strokeDashoffset: -readOffset,\n          className: \'transition-all duration-500 cursor-pointer\',\n          onMouseEnter: (e) => setTooltip({\n            x: e.clientX,\n            y: e.clientY,\n            content: `Writes: ${formatNumber(totalWrites)} (${writePct.toFixed(1)}%)`\n          }),\n          onMouseLeave: () => setTooltip(null)\n        })\n      ]),\n      // Center text\n      React.createElement(\'div\', {\n        key: \'center\',\n        className: \'absolute inset-0 flex flex-col items-center justify-center\'\n      }, [\n        React.createElement(\'div\', {\n          key: \'total\',\n          className: `font-bold text-gray-900 dark:text-white ${isCompact ? \'text-sm\' : \'text-base\'}`\n        }, formatNumber(total)),\n        React.createElement(\'div\', {\n          key: \'label\',\n          className: `text-gray-500 dark:text-gray-400 ${isCompact ? \'text-xs\' : \'text-xs\'}`\n        }, \'ops\')\n      ])\n    ]);\n  };\n\n  // Compact view for small containers\n  if (isCompact) {\n    return React.createElement(\'div\', {\n      ref: containerRef,\n      className: \'p-3 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-700 relative\',\n      onMouseLeave: () => setTooltip(null)\n    }, [\n      React.createElement(\'div\', {\n        key: \'header\',\n        className: \'text-center mb-2\'\n      }, React.createElement(\'span\', {\n        className: \'text-xs text-gray-500 dark:text-gray-400\'\n      }, `Node ${displayNodeId}`)),\n      \n      React.createElement(\'div\', {\n        key: \'chart\',\n        className: \'flex justify-center mb-3\'\n      }, createDonutChart()),\n      \n      React.createElement(\'div\', {\n        key: \'stats\',\n        className: \'grid grid-cols-2 gap-2 text-xs\'\n      }, [\n        React.createElement(\'div\', { key: \'reads-col\' }, [\n          React.createElement(\'div\', {\n            key: \'reads-header\',\n            className: \'flex items-center gap-1 mb-1\'\n          }, [\n            React.createElement(\'div\', {\n              key: \'dot\',\n              className: \'w-2 h-2 bg-blue-500 rounded-full\'\n            }),\n            React.createElement(\'span\', {\n              key: \'label\',\n              className: \'text-gray-700 dark:text-gray-300\'\n            }, \'Reads\')\n          ]),\n          React.createElement(\'div\', {\n            key: \'reads-data\',\n            className: \'text-gray-600 dark:text-gray-400 space-y-0.5\'\n          }, [\n            React.createElement(\'div\', { key: \'select\' }, `SELECT: ${formatNumber(totalReads)}`),\n            React.createElement(\'div\', { key: \'sync\' }, `Sync: ${formatNumber(syncReads)}`)\n          ])\n        ]),\n        \n        React.createElement(\'div\', { key: \'writes-col\' }, [\n          React.createElement(\'div\', {\n            key: \'writes-header\',\n            className: \'flex items-center gap-1 mb-1\'\n          }, [\n            React.createElement(\'div\', {\n              key: \'dot\',\n              className: \'w-2 h-2 bg-red-500 rounded-full\'\n            }),\n            React.createElement(\'span\', {\n              key: \'label\',\n              className: \'text-gray-700 dark:text-gray-300\'\n            }, \'Writes\')\n          ]),\n          React.createElement(\'div\', {\n            key: \'writes-data\',\n            className: \'text-gray-600 dark:text-gray-400 space-y-0.5\'\n          }, [\n            React.createElement(\'div\', { key: \'orig\' }, `Orig: ${formatNumber(writesOriginated)}`),\n            React.createElement(\'div\', { key: \'recv\' }, `Recv: ${formatNumber(writesReceived)}`),\n            React.createElement(\'div\', { key: \'commit\' }, `Commit: ${formatNumber(writesCommitted)}`)\n          ])\n        ])\n      ]),\n      \n      tooltip && React.createElement(\'div\', {\n        key: \'tooltip\',\n        className: \'fixed z-50 px-2 py-1 bg-black text-white text-xs rounded shadow-lg pointer-events-none\',\n        style: { \n          left: tooltip.x + 10, \n          top: tooltip.y - 10,\n          transform: \'translateX(-50%)\'\n        }\n      }, tooltip.content)\n    ]);\n  }\n\n  // Normal view\n  return React.createElement(\'div\', {\n    ref: containerRef,\n    className: \'p-4 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-700 relative\',\n    onMouseLeave: () => setTooltip(null)\n  }, [\n    React.createElement(\'div\', {\n      key: \'header\',\n      className: \'flex items-start justify-between mb-4\'\n    }, [\n      React.createElement(\'div\', { key: \'info\' }, [\n        React.createElement(\'span\', {\n          key: \'node\',\n          className: \'text-sm text-gray-500 dark:text-gray-400\'\n        }, `Node ${displayNodeId}`),\n        React.createElement(\'div\', {\n          key: \'total\',\n          className: \'text-lg font-semibold text-gray-900 dark:text-white mt-1\'\n        }, `${formatNumber(total)} operations`)\n      ]),\n      React.createElement(\'div\', { key: \'chart\' }, createDonutChart())\n    ]),\n\n    React.createElement(\'div\', {\n      key: \'stats\',\n      className: \'grid grid-cols-2 gap-4 text-sm\'\n    }, [\n      React.createElement(\'div\', { key: \'reads-section\' }, [\n        React.createElement(\'h4\', {\n          key: \'reads-title\',\n          className: \'text-xs font-medium text-blue-700 dark:text-blue-400 mb-2 uppercase tracking-wide flex items-center gap-1\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'dot\',\n            className: \'w-2 h-2 bg-blue-500 rounded-full\'\n          }),\n          `Read Operations (${readPct.toFixed(1)}%)`\n        ]),\n        React.createElement(\'div\', {\n          key: \'reads-data\',\n          className: \'space-y-1 text-xs\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'select-row\',\n            className: \'flex justify-between\'\n          }, [\n            React.createElement(\'span\', {\n              key: \'label\',\n              className: \'text-gray-600 dark:text-gray-400\'\n            }, \'SELECT\'),\n            React.createElement(\'span\', {\n              key: \'value\',\n              className: \'font-mono text-gray-900 dark:text-white\'\n            }, formatNumber(totalReads))\n          ]),\n          React.createElement(\'div\', {\n            key: \'sync-row\',\n            className: \'flex justify-between\'\n          }, [\n            React.createElement(\'span\', {\n              key: \'label\',\n              className: \'text-gray-600 dark:text-gray-400\'\n            }, \'Synchronized\'),\n            React.createElement(\'span\', {\n              key: \'value\',\n              className: \'font-mono text-gray-900 dark:text-white\'\n            }, formatNumber(syncReads))\n          ])\n        ])\n      ]),\n\n      React.createElement(\'div\', { key: \'writes-section\' }, [\n        React.createElement(\'h4\', {\n          key: \'writes-title\',\n          className: \'text-xs font-medium text-red-700 dark:text-red-400 mb-2 uppercase tracking-wide flex items-center gap-1\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'dot\',\n            className: \'w-2 h-2 bg-red-500 rounded-full\'\n          }),\n          `Write Operations (${writePct.toFixed(1)}%)`\n        ]),\n        React.createElement(\'div\', {\n          key: \'writes-data\',\n          className: \'space-y-1 text-xs\'\n        }, [\n          React.createElement(\'div\', {\n            key: \'orig-row\',\n            className: \'flex justify-between\'\n          }, [\n            React.createElement(\'span\', {\n              key: \'label\',\n              className: \'text-gray-600 dark:text-gray-400\'\n            }, \'Originated\'),\n            React.createElement(\'span\', {\n              key: \'value\',\n              className: \'font-mono text-gray-900 dark:text-white\'\n            }, formatNumber(writesOriginated))\n          ]),\n          React.createElement(\'div\', {\n            key: \'recv-row\',\n            className: \'flex justify-between\'\n          }, [\n            React.createElement(\'span\', {\n              key: \'label\',\n              className: \'text-gray-600 dark:text-gray-400\'\n            }, \'Received\'),\n            React.createElement(\'span\', {\n              key: \'value\',\n              className: \'font-mono text-gray-900 dark:text-white\'\n            }, formatNumber(writesReceived))\n          ]),\n          React.createElement(\'div\', {\n            key: \'commit-row\',\n            className: \'flex justify-between\'\n          }, [\n            React.createElement(\'span\', {\n              key: \'label\',\n              className: \'text-gray-600 dark:text-gray-400\'\n            }, \'Committed\'),\n            React.createElement(\'span\', {\n              key: \'value\',\n              className: \'font-mono text-gray-900 dark:text-white\'\n            }, formatNumber(writesCommitted))\n          ])\n        ])\n      ])\n    ]),\n    \n    tooltip && React.createElement(\'div\', {\n      key: \'tooltip\',\n      className: \'fixed z-50 px-2 py-1 bg-black text-white text-xs rounded shadow-lg pointer-events-none\',\n      style: { \n        left: tooltip.x + 10, \n        top: tooltip.y - 10,\n        transform: \'translateX(-50%)\'\n      }\n    }, tooltip.content)\n  ]);\n};',0,1,'2025-07-22 09:28:54','2025-07-22 14:15:12');
/*!40000 ALTER TABLE `commands` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dashboard_layouts`
--

DROP TABLE IF EXISTS `dashboard_layouts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dashboard_layouts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) NOT NULL,
  `layouts` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`layouts`)),
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_layout_user` (`user_id`),
  KEY `idx_user` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=53204 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dashboard_layouts`
--

LOCK TABLES `dashboard_layouts` WRITE;
/*!40000 ALTER TABLE `dashboard_layouts` DISABLE KEYS */;
INSERT INTO `dashboard_layouts` VALUES (53167,'94daa8cf-fd26-4a67-ae32-f9b8c877d53b','{\"layouts\":{\"order\":[\"6\",\"15\",\"16\",\"25\",\"26\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"46\",\"47\",\"55\",\"56\",\"57\",\"58\",\"60\",\"2\",\"54\",\"61\",\"32\",\"62\",\"63\"]},\"pinnedItems\":[],\"collapsedItems\":{},\"userModifiedMap\":{}}','2025-07-21 14:47:10','2025-07-25 00:22:01'),(53192,'dev-admin-user','{\"layouts\":{\"order\":[\"6\",\"15\",\"16\",\"25\",\"26\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"46\",\"47\",\"55\",\"56\",\"57\",\"58\",\"60\",\"62\",\"63\",\"64\",\"2\",\"54\",\"61\",\"32\"]},\"pinnedItems\":[],\"collapsedItems\":{},\"userModifiedMap\":{}}','2025-07-30 09:10:03','2025-07-30 09:10:04');
/*!40000 ALTER TABLE `dashboard_layouts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `feedback`
--

DROP TABLE IF EXISTS `feedback`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `feedback` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) NOT NULL,
  `chat_id` varchar(255) NOT NULL,
  `message_id` varchar(255) NOT NULL,
  `feedback_type` enum('helpful','not_helpful') NOT NULL,
  `reasons` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`reasons`)),
  `additional_feedback` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_user_message_feedback` (`user_id`,`message_id`),
  KEY `idx_user_id` (`user_id`),
  KEY `idx_chat_id` (`chat_id`),
  KEY `idx_message_id` (`message_id`),
  KEY `idx_feedback_type` (`feedback_type`),
  KEY `idx_created_at` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `feedback`
--

LOCK TABLES `feedback` WRITE;
/*!40000 ALTER TABLE `feedback` DISABLE KEYS */;
/*!40000 ALTER TABLE `feedback` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `transaction_analysis`
--

DROP TABLE IF EXISTS `transaction_analysis`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `transaction_analysis` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `project_id` varchar(255) NOT NULL,
  `environment` varchar(50) NOT NULL,
  `user_id` varchar(255) NOT NULL,
  `analysis_name` varchar(255) NOT NULL,
  `extra_context` text DEFAULT NULL,
  `original_payload` longtext NOT NULL,
  `analysis_result` longtext NOT NULL,
  `status` enum('pending','processing','completed','failed') DEFAULT 'pending',
  `error_message` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `completed_at` timestamp NULL DEFAULT NULL,
  `token_count` int(11) DEFAULT 0,
  `processing_time_ms` int(11) DEFAULT 0,
  `use_ai` tinyint(1) DEFAULT 1 COMMENT 'Whether this analysis should be used in AI chat (1=selected/green sparkles, 0=unselected/red sparkles)',
  PRIMARY KEY (`id`),
  KEY `idx_project_env` (`project_id`,`environment`),
  KEY `idx_user_id` (`user_id`),
  KEY `idx_status` (`status`),
  KEY `idx_created_at` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `transaction_analysis`
--

LOCK TABLES `transaction_analysis` WRITE;
/*!40000 ALTER TABLE `transaction_analysis` DISABLE KEYS */;
/*!40000 ALTER TABLE `transaction_analysis` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_ai_settings`
--

DROP TABLE IF EXISTS `user_ai_settings`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_ai_settings` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) NOT NULL,
  `ai_model` enum('reasoning','fast') NOT NULL DEFAULT 'fast',
  `response_style` enum('objective','balanced','creative') NOT NULL DEFAULT 'balanced',
  `response_length` enum('short','default','long') NOT NULL DEFAULT 'default',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_user_settings` (`user_id`),
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_ai_settings`
--

LOCK TABLES `user_ai_settings` WRITE;
/*!40000 ALTER TABLE `user_ai_settings` DISABLE KEYS */;
INSERT INTO `user_ai_settings` VALUES (1,'94daa8cf-fd26-4a67-ae32-f9b8c877d53b','reasoning','balanced','long','2025-07-09 16:02:21','2025-07-21 13:41:30'),(14,'dev-admin-user','fast','balanced','default','2025-07-17 22:48:00','2025-07-17 22:48:00'),(23,'3be95030-23da-4b4f-8e73-432ec56b8f06','reasoning','balanced','default','2025-07-30 16:57:32','2025-09-25 08:33:25');
/*!40000 ALTER TABLE `user_ai_settings` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_token_usage`
--

DROP TABLE IF EXISTS `user_token_usage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
CREATE TABLE `user_token_usage` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) NOT NULL,
  `usage_date` date NOT NULL,
  `total_input_tokens` bigint(20) NOT NULL DEFAULT 0,
  `total_output_tokens` bigint(20) NOT NULL DEFAULT 0,
  `total_tokens` bigint(20) NOT NULL DEFAULT 0,
  `daily_limit` bigint(20) NOT NULL DEFAULT 1000000,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `last_updated` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_user_date` (`user_id`,`usage_date`),
  KEY `idx_user_date` (`user_id`,`usage_date`),
  KEY `idx_usage_date` (`usage_date`),
  CONSTRAINT `fk_user_token_usage` FOREIGN KEY (`user_id`) REFERENCES `users` (`user_id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_token_usage`
--

LOCK TABLES `user_token_usage` WRITE;
/*!40000 ALTER TABLE `user_token_usage` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_token_usage` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `user_dashboard_layouts`
--

DROP TABLE IF EXISTS `user_dashboard_layouts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_dashboard_layouts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` varchar(255) NOT NULL,
  `layouts` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`layouts`)),
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`),
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=62 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `user_dashboard_layouts`
--

LOCK TABLES `user_dashboard_layouts` WRITE;
/*!40000 ALTER TABLE `user_dashboard_layouts` DISABLE KEYS */;
/*!40000 ALTER TABLE `user_dashboard_layouts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `user_id` varchar(255) NOT NULL,
  `username` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `api_token` text DEFAULT NULL,
  `salt` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `username` (`username`),
  UNIQUE KEY `email` (`email`),
  KEY `idx_user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES ('3be95030-23da-4b4f-8e73-432ec56b8f06','Rimom Costa','rcosta@adobe.com','4a62ed661c7b12e6bafe2a78fba0e710:d61ea7bdab1f474d126da3c6cce0fbd3:71075ed23c943d55375dd0270ff8d617f87297fcbff5a4784c2311813d930168f602742138b6e12f310e402741b29153','4a62ed661c7b12e6bafe2a78fba0e710','2025-07-30 09:48:56','2025-09-25 09:09:33'),('dev-admin-user','Updated Admin','updated-admin@example.com','dev-salt-placeholder:c5e493062533747e5ef240bf220a61ae:67128dfd35f335603b3085009410d093fdd23b1229e8ac7c6b7629cda8612755131d9ccad76fb60a4e0ed2750678e13a','dev-salt-placeholder','2024-12-11 19:41:45','2025-07-30 09:50:33');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-09-30 10:56:37
